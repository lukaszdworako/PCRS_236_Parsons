[ "probs",
{"problem_data":{"problem_type":0,"testname":"isPalindrome","brief_description":"Is a string the same when reversed?","description":"<p>\n    Complete the <code>isPalindrome<\/code> method so that it returns\n    <code>true<\/code> if the string passed as the parameter is the\n    same if its characters are reversed.  For example, \"abba\" is a\n    palindrome, but \"abbc\" is not a palindrome.\n<\/p>\n<p>\n    <b>Important<\/b>: your implementation must be recursive:\n    do not use a loop.  Note that CloudCoder will probably not check\n    whether your method is recursive: you're on the honor system.\n<\/p>\n<p>\n    Think about what base case or cases would be appropriate.\n    Make sure that your recursive call or calls make progress towards\n    a base case.\n<\/p>\n<p>\n    The method should <i>not<\/i> ignore spaces, punctuation, or case\n    differences.  For example, \"abbA\" should <em>not<\/em> be considered a\n    palindrome.\n<\/p>\n<p>\n    You can use the <code>length()<\/code> method to get the length\n    of a string.  The <code>charAt(int)<\/code> method gets the character\n    at the given index in a string.  The <code>substring(int, int)<\/code>\n    method gets a substring from the given start index (inclusive)\n    to the given end index (exclusive).  A correct solution will\n    probably use all of these methods.\n<\/p>","skeleton":"public boolean isPalindrome(String s) {\n    \/\/ TODO: add your code\n}","schema_version":1,"author_name":"David Hovemeyer","author_email":"dhovemey@ycp.edu","author_website":"http:\/\/faculty.ycp.edu\/~dhovemey","timestamp_utc":1356288559255,"license":1,"parent_hash":"","external_library_url":"","external_library_md5":""},"test_case_data_list":[{"test_case_name":"t0","input":"\"abba\"","output":"true","secret":false},{"test_case_name":"t1","input":"\"racecar\"","output":"true","secret":false},{"test_case_name":"t2","input":"\"hoopoe\"","output":"false","secret":false},{"test_case_name":"t3","input":"\"axya\"","output":"false","secret":false},{"test_case_name":"t4","input":"\"abbadba\"","output":"false","secret":false},{"test_case_name":"t5","input":"\"abbA\"","output":"false","secret":false},{"test_case_name":"t6","input":"\"abcdedcba\"","output":"true","secret":true},{"test_case_name":"t7","input":"\"abcddba\"","output":"false","secret":true}]},
{"problem_data":{"problem_type":0,"testname":"lessThan10","brief_description":"Return true if a number is less than 10.","description":"Write a method that takes an int as a parameter and returns true if the\nparameter is less than 10.","skeleton":"public boolean lessThan10(int n) {\n    return false;\n}","schema_version":1,"author_name":"Jaime Spacco","author_email":"jspacco@knox.edu","author_website":"","timestamp_utc":1348552378326,"license":1,"parent_hash":"","external_library_url":"","external_library_md5":""},"test_case_data_list":[{"test_case_name":"t1","input":"5","output":"true","secret":false},{"test_case_name":"t2","input":"10","output":"false","secret":false},{"test_case_name":"t3","input":"-5","output":"true","secret":false},{"test_case_name":"t4","input":"1000","output":"false","secret":false}]},
{"problem_data":{"problem_type":0,"testname":"positiveLessThan10","brief_description":"Return true if parameter both positive and < 10","description":"Write a method that takes an int as a parameter and returns true\nif the parameter is both positive (i.e. greater than 0) and also\nless than 10.","skeleton":"public boolean positiveLessThan10(int x) {\n    return false;\n}","schema_version":1,"author_name":"Jaime Spacco","author_email":"jspacco@knox.edu","author_website":"","timestamp_utc":1348552900816,"license":1,"parent_hash":"","external_library_url":"","external_library_md5":""},"test_case_data_list":[{"test_case_name":"t1","input":"0","output":"false","secret":false},{"test_case_name":"t2","input":"-5","output":"false","secret":false},{"test_case_name":"t3","input":"10","output":"false","secret":false},{"test_case_name":"t4","input":"12","output":"false","secret":false},{"test_case_name":"t5","input":"5","output":"true","secret":false}]},
{"problem_data":{"problem_type":0,"testname":"isBetween","brief_description":"Is the first parameter between the next two?","description":"Write a method called isBetween that takes three ints as\r\nparameters and returns true if the first number is between\r\nthe second two, inclusively, and false otherwise.\r\n<p>\r\nisBetween(3, 3, 3) should return true<br>\r\nisBetween(4, 7, 9) should return false<br>\r\nisBetween(2, 1, 3) should return true<br>\r\nisBetween(2, 3, 1) should return true<br>\r\n<\/p>","skeleton":"public boolean isBetween(int a, int b, int c) {\n    return false;\n}","schema_version":1,"author_name":"Jaime Spacco","author_email":"jspacco@knox.edu","author_website":"","timestamp_utc":1348631042316,"license":1,"parent_hash":"","external_library_url":"","external_library_md5":""},"test_case_data_list":[{"test_case_name":"t1","input":"3, 3, 3","output":"true","secret":false},{"test_case_name":"t2","input":"2, 1, 3","output":"true","secret":false},{"test_case_name":"t3","input":"2, 3, 1","output":"true","secret":false},{"test_case_name":"t4","input":"4, 3, 3","output":"false","secret":false},{"test_case_name":"t5","input":"2, 3, 3","output":"false","secret":false},{"test_case_name":"t6","input":"2, 7, 9","output":"false","secret":false},{"test_case_name":"t7","input":"9, 7, 2","output":"false","secret":false}]},
{"problem_data":{"problem_type":0,"testname":"pairSum20","brief_description":"Does any pair of parameters sum to 20","description":"The method has 3 parameters: a, b and c.  Return true if any\npair of parameters (ab, ac, or bc) sums to 20.\n","skeleton":"public boolean pairSum20(int a, int b, int c) {\n    return false;\n}","schema_version":1,"author_name":"Jaime Spacco","author_email":"jspacco@knox.edu","author_website":"asdf","timestamp_utc":1348634041375,"license":1,"parent_hash":"","external_library_url":"","external_library_md5":""},"test_case_data_list":[{"test_case_name":"t1","input":"1, 2, 3","output":"false","secret":false},{"test_case_name":"t2","input":"4, 16, 7","output":"true","secret":false},{"test_case_name":"t3","input":"-6, 0, 26","output":"true","secret":false},{"test_case_name":"t4","input":"0, 12, 8","output":"true","secret":false},{"test_case_name":"t5","input":"17, 13, 19","output":"false","secret":false},{"test_case_name":"t6","input":"5, 5, 10","output":"false","secret":false}]},
{"problem_data":{"problem_type":0,"testname":"groundhogParty","brief_description":"Groundhogs at a party!","description":"Groundhogs like to throw fun parties, and at their parties,\nthey like to eat Reeses peanut butter cups.  But not\ntoo many Reeses or they feel sick!  A successful groundhog\nparty will have between 10 and 20 Reeses peanut butter cups,\ninclusive, unless it is the weekend, in which case they\nwill need 15 to 25 Reeses peanut butter cups, inclusive.\n<p>\nYour Java method should take two parameters, the first\nbeing the number of Reeses peanut butter cups, the \nsecond a boolean representing whether it is the weekend.\n<\/p>\n<p>\n\n<\/p>","skeleton":"public boolean groundhogParty(int numReeses, boolean isWeekend) {\n    \n}","schema_version":1,"author_name":"Jaime Spacco","author_email":"jspacco@knox.edu","author_website":"x","timestamp_utc":1348770503371,"license":1,"parent_hash":"","external_library_url":"","external_library_md5":""},"test_case_data_list":[{"test_case_name":"t1","input":"5, true","output":"false","secret":false},{"test_case_name":"t2","input":"16, false","output":"true","secret":false},{"test_case_name":"t3","input":"21, false","output":"false","secret":false},{"test_case_name":"t4","input":"21, true","output":"true","secret":false},{"test_case_name":"t5","input":"25, true","output":"true","secret":false},{"test_case_name":"t6","input":"10, false","output":"true","secret":false},{"test_case_name":"t7","input":"14, true","output":"false","secret":false},{"test_case_name":"t8","input":"26, true","output":"false","secret":false}]},
{"problem_data":{"problem_type":0,"testname":"teensRule","brief_description":"Given two integers return their sum.","description":"Given 2 integers, a and b, return their sum. Although, if either a or b is in the range 13..19 inclusive, it is considered a teen, case in which you should return 19.","skeleton":"public int teensRule(int a, int b){\n    return 0;\n}","schema_version":1,"author_name":"Andrei Papancea","author_email":"apapance@knox.edu","author_website":"","timestamp_utc":1348776111659,"license":1,"parent_hash":"","external_library_url":"","external_library_md5":""},"test_case_data_list":[{"test_case_name":"t1","input":"1,5","output":"6","secret":false},{"test_case_name":"t2","input":"10,11","output":"21","secret":false},{"test_case_name":"t3","input":"12,13","output":"19","secret":false},{"test_case_name":"t4","input":"19,1","output":"19","secret":false},{"test_case_name":"t5","input":"15,20","output":"19","secret":true},{"test_case_name":"t6","input":"19,25","output":"19","secret":true}]},
{"problem_data":{"problem_type":0,"testname":"findThe","brief_description":"Find the first occurrence of the word the.","description":"Write a program that takes a sentence as input and returns the index of the first occurrence of the word the, regardless of the capitalization. If there is no occurrence of the return -1. For instance, if the sentence is \u201CThe apple is red.\u201D the output should be 0, if the sentence is \u201CI ate the red apple.\u201D the output should be 6, and if the sentence is \u201CI love apples.\u201D the output should be -1.","skeleton":"public int findThe(String str){\n    return 0;\n}","schema_version":1,"author_name":"Andrei Papancea","author_email":"apapance@knox.edu","author_website":"","timestamp_utc":1348810569369,"license":1,"parent_hash":"","external_library_url":"","external_library_md5":""},"test_case_data_list":[{"test_case_name":"t1","input":"\"The apple is red.\"","output":"0","secret":false},{"test_case_name":"t2","input":"\"I ate the red apple.\"","output":"6","secret":false},{"test_case_name":"t3","input":"\"I love apples.\"","output":"-1","secret":false},{"test_case_name":"t4","input":"\"TheTHEthe\"","output":"0","secret":false},{"test_case_name":"t5","input":"\"the\"","output":"0","secret":false}]},
{"problem_data":{"problem_type":0,"testname":"convertDate","brief_description":"Convert a date from a YYYY-MM-DD format to the usual MM\/DD\/Y","description":"Write a program that takes a date string formatted as <b>YYYY-MM-DD<\/b> as input and converts and outputs it as <b>MM\/DD\/YYYY<\/b>. For instance, the input <b>2007-07-21<\/b> will result in the following output <b>07\/21\/2007<\/b>. Print <b>Incorrect input<\/b> if the date is not possible. Assume that every month has 31 days and that the year, month or day cannot be 0 (or 00).","skeleton":"public String convertDate(String date){\n    return \"\";\n}","schema_version":1,"author_name":"Andrei Papancea","author_email":"apapance@knox.edu","author_website":"","timestamp_utc":1348811446652,"license":1,"parent_hash":"","external_library_url":"","external_library_md5":""},"test_case_data_list":[{"test_case_name":"t1","input":"\"2012-09-28\"","output":"\"09\/28\/2012\"","secret":false},{"test_case_name":"t2","input":"\"1999-12-12\"","output":"\"12\/12\/1999\"","secret":false},{"test_case_name":"t3","input":"\"2012-13-26\"","output":"\"Incorrect input\"","secret":false},{"test_case_name":"t4","input":"\"2012-04-34\"","output":"\"Incorrect input\"","secret":false}]},
{"problem_data":{"problem_type":0,"testname":"exactlyOnePositive","brief_description":"Is exactly one parameter positive?","description":"Write a static method that takes three ints as parameters and returns true if <i>exactly<\/i> one parameter is positive.\nFor example:\n<p>\nexactlyOnePositive(1,0,0) -> true<br>\nexactlyOnePositive(1,1,1) -> false<br>\nexactlyOnePositive(1,1,0) -> false<br>\n<\/p>","skeleton":"public static boolean exactlyOnePositive(int a, int b, int c)\n{\n    \/\/ code goes here\n}","schema_version":1,"author_name":"Jaime Spacco","author_email":"jspacco@knox.edu","author_website":"","timestamp_utc":1358921805982,"license":1,"parent_hash":"","external_library_url":"","external_library_md5":""},"test_case_data_list":[{"test_case_name":"t0","input":"1,1,1","output":"false","secret":false},{"test_case_name":"t1","input":"1,1,0","output":"false","secret":false},{"test_case_name":"t2","input":"1,0,0","output":"true","secret":false},{"test_case_name":"t3","input":"0,2,0","output":"true","secret":false},{"test_case_name":"t4","input":"0,0,3","output":"true","secret":false},{"test_case_name":"t5","input":"7,0,5","output":"false","secret":false},{"test_case_name":"t6","input":"-5, 9, 32324","output":"false","secret":false}]},
{"problem_data":{"problem_type":0,"testname":"countAB","brief_description":"Count the number of times 'ab' occurs in a String","description":"Write a static method called countAB that takes a String as a parameter and returns the number of times that ab occurs (i.e. an 'a' immediately followed by 'b').\n<p>\ncountAB(\"abc\") -> 1<br>\ncountAB(\"acb\") -> 0<br>\ncountAB(\"ababbc\") -> 2<br>\n<\/p>","skeleton":"public static int countAB(String str)\n{\n    \/\/ code goes here\n}","schema_version":1,"author_name":"Jaime Spacco","author_email":"jspacco@knox.edu","author_website":"","timestamp_utc":1358730660657,"license":1,"parent_hash":"","external_library_url":"","external_library_md5":""},"test_case_data_list":[{"test_case_name":"t0","input":"\"abc\"","output":"1","secret":false},{"test_case_name":"t1","input":"\"acb\"","output":"0","secret":false},{"test_case_name":"t2","input":"\"ababbc\"","output":"2","secret":false},{"test_case_name":"t3","input":"\"a\"","output":"0","secret":false},{"test_case_name":"t4","input":"\"\"","output":"0","secret":true},{"test_case_name":"t5","input":"\"ab\"","output":"1","secret":false},{"test_case_name":"t6","input":"\"ba\"","output":"0","secret":false},{"test_case_name":"t7","input":"\"wxyzab\"","output":"1","secret":false}]},
{"problem_data":{"problem_type":0,"testname":"countCharsInOrder","brief_description":"Get number of times two chars sequence is in a String","description":"Write a static method that takes a String and two chars as parameters, and returns the number of times that the two characters occur consecutively.  Note that the characters must occur in the same order as the parameters are given.\n<p>\ncountCharsInOrder(\"abcd\", 'b', 'c') -> 1<br>\ncountCharsInOrder(\"abcd\", 'c', 'b') -> 0<br>\ncountCharsInOrder(\"wxyzxz\", 'w', 'z') -> 2<br>\n<\/p>","skeleton":"public static int countCharsInOrder(String str, char ch1, char ch2)\n{\n    \n}","schema_version":1,"author_name":"Jaime Spacco","author_email":"jspacco@knox.edu","author_website":"","timestamp_utc":1358730992914,"license":1,"parent_hash":"","external_library_url":"","external_library_md5":""},"test_case_data_list":[{"test_case_name":"t0","input":"\"abcd\", 'b', 'c'","output":"1","secret":false},{"test_case_name":"t1","input":"\"abcd\", 'c', 'b'","output":"0","secret":false},{"test_case_name":"t2","input":"\"wzzwz\", 'w', 'z'","output":"2","secret":false},{"test_case_name":"t3","input":"\"aabcaabzpzz\", 'a', 'a'","output":"2","secret":false},{"test_case_name":"t4","input":"\"abcdabcdaa\", 'a', 'a'","output":"1","secret":false},{"test_case_name":"t5","input":"\"\", 'a', 'b'","output":"0","secret":false},{"test_case_name":"t6","input":"\"a\", 'a', 'a'","output":"0","secret":false},{"test_case_name":"t7","input":"\"abcdabcdaaa\", 'a', 'a'","output":"2","secret":false}]},
{"problem_data":{"problem_type":0,"testname":"countCharsUnordered","brief_description":"count chars where params are in any order","description":"Write a static method that takes a String and two chars as parameters, and returns the number of times that the two characters occur consecutively, in any order.\n<p>\ncountCharsUnordered(\"abcd\", 'b', 'c') -> 1<br>\ncountCharsUnordered(\"abcd\", 'c', 'b') -> 1<br>\ncountCharsUnordered(\"wzzw\", 'w', 'z') -> 2<br>\n<\/p>","skeleton":"public static int countCharsUnordered(String s, char ch1, char ch2)\n{\n    \n}","schema_version":1,"author_name":"Jaime Spacco","author_email":"jspacco@knox.edu","author_website":"","timestamp_utc":1358922098015,"license":1,"parent_hash":"","external_library_url":"","external_library_md5":""},"test_case_data_list":[{"test_case_name":"t0","input":"\"abcd\", 'b', 'c'","output":"1","secret":false},{"test_case_name":"t1","input":"\"abcd\", 'c', 'b'","output":"1","secret":false},{"test_case_name":"t2","input":"\"wzzw\", 'w', 'z'","output":"2","secret":false},{"test_case_name":"t3","input":"\"abcd\", 'a', 'd'","output":"0","secret":false},{"test_case_name":"t4","input":"\"\", 'a', 'b'","output":"0","secret":false},{"test_case_name":"t5","input":"\"bcbc\", 'c', 'b'","output":"3","secret":false},{"test_case_name":"t6","input":"\"bcbcbcababc\", 'b', 'c'","output":"6","secret":false}]},
{"problem_data":{"problem_type":0,"testname":"ascendingOrder","brief_description":"Check if params are in ascending order.","description":"Write a static method called ascendingOrder that takes three ints (a, b, c) and a boolean (eq) as parameters.  The method should return true if eq is true and a, b, c are in ascending order and possibly equal.  The method should return false if a, b, c are not in ascending order.  \nIf eq is true, then a, b, and c are allowed to be equal for the purposes of determining if they are in ascedning order.\nFor example:\n<p>\nascendingOrder(2, 2, 2, true) -> true<br>\nascendingOrder(5, 5, 5, false) -> false<br>\nascendingOrder(5, 6, 7, false) -> true<br>\nascendingOrder(1, 3, 2, true) -> false<br>\n    \n<\/p>","skeleton":"public static boolean ascendingOrder(int a, int b, int c, boolean eq)\n{\n    \/\/ code here\n}","schema_version":1,"author_name":"Jaime Spacco","author_email":"jspacco@knox.edu","author_website":"","timestamp_utc":1358922755979,"license":1,"parent_hash":"","external_library_url":"","external_library_md5":""},"test_case_data_list":[{"test_case_name":"t0","input":"2, 2, 2, true","output":"true","secret":false},{"test_case_name":"t1","input":"5, 5, 5, false","output":"false","secret":false},{"test_case_name":"t2","input":"5, 6, 7, false","output":"true","secret":false},{"test_case_name":"t3","input":"1, 3, 2, true","output":"false","secret":false},{"test_case_name":"t4","input":"1, 3, 2, false","output":"false","secret":false},{"test_case_name":"t5","input":"5, 5, 99, true","output":"true","secret":false},{"test_case_name":"t6","input":"5, 5, 99, false","output":"false","secret":false},{"test_case_name":"t7","input":"5, 99, 5, true","output":"false","secret":false},{"test_case_name":"t8","input":"6, 7, 5, true","output":"false","secret":false},{"test_case_name":"t9","input":"3, 9, 9, true","output":"true","secret":false}]},
{"problem_data":{"problem_type":0,"testname":"move2end","brief_description":"Move the first 2 chars to the end of the String.","description":"Write a method that moves the first 2 characters to the end.\nIf the String is of length 2 or less, the method should\njust return its parameter unchanged.\n<p>\nmove2end(\"Hello\") -> \"lloHe\"<br>\nmove2end(\"Knox College\") -> \"ox CollegeKn\"<br>\nmove2end(\"CloudCoder\") -> \"oudCoderCl\"<br>\n<\/p>","skeleton":"public static String move2end(String str) {\n  \n}","schema_version":1,"author_name":"Jaime Spacco","author_email":"jspacco@knox.edu","author_website":"","timestamp_utc":1359038200854,"license":1,"parent_hash":"","external_library_url":"","external_library_md5":""},"test_case_data_list":[{"test_case_name":"t0","input":"\"Hello\"","output":"\"lloHe\"","secret":false},{"test_case_name":"t1","input":"\"Knox College\"","output":"\"ox CollegeKn\"","secret":false},{"test_case_name":"t2","input":"\"CloudCoder\"","output":"\"oudCoderCl\"","secret":false},{"test_case_name":"t3","input":"\"X\"","output":"\"X\"","secret":false},{"test_case_name":"t4","input":"\"AB\"","output":"\"AB\"","secret":false},{"test_case_name":"t5","input":"\"ABC\"","output":"\"CAB\"","secret":false}]},
{"problem_data":{"problem_type":0,"testname":"moveNToEnd","brief_description":"Move first N characters to the end of the String.","description":"Given a String s and an int n, move the first n characters of\ns to the end of the String.  If n is greater than the length\nof the String, return the String unchanged.\n<p>\nmoveNToEnd(\"Hello\", 3) -> \"loHel\"<br>\nmoveNToEnd(\"Hello\", 6) -> \"Hello\"<br>\nmoveNToEnd(\"CloudCoder\", 0) -> \"CloudCoder\"<br>\nmoveNToEnd(\"CloudCoder\", 5) -> \"CoderCloud\"<br>\n<\/p>","skeleton":"public static String moveNToEnd(String s, int n)\n{\n    \/\/ code here\n}","schema_version":1,"author_name":"Jaime Spacco","author_email":"jspacco@knox.edu","author_website":"","timestamp_utc":1359038524159,"license":1,"parent_hash":"","external_library_url":"","external_library_md5":""},"test_case_data_list":[{"test_case_name":"t0","input":"\"Hello\", 3","output":"\"loHel\"","secret":false},{"test_case_name":"t1","input":"\"Hello\", 6","output":"\"Hello\"","secret":false},{"test_case_name":"t2","input":"\"CloudCoder\", 0","output":"\"CloudCoder\"","secret":false},{"test_case_name":"t3","input":"\"CloudCoder\", 5","output":"\"CoderCloud\"","secret":false},{"test_case_name":"t4","input":"\"Hi\", 1","output":"\"iH\"","secret":false},{"test_case_name":"t5","input":"\"dogs\", 3","output":"\"sdog\"","secret":false}]},
{"problem_data":{"problem_type":0,"testname":"cutMiddle","brief_description":"Cut out the middle char or chars of a String.","description":"Given a String, return the String without its middle character\nwhen the length is odd, and without the middle 2 characters when\nthe length is even.\n<p>\ncutMiddle(\"Hello\") -> \"Helo\"<br>\ncutMiddle(\"CloudCoder\") -> \"Clouoder\"<br>\ncutMiddle(\"AB\") -> \"\"<br>\n<\/p>","skeleton":"public static String cutMiddle(String s)\n{\n    \/\/ code here\n}","schema_version":1,"author_name":"Jaime Spacco","author_email":"jspacco@knox.edu","author_website":"","timestamp_utc":1359039089977,"license":1,"parent_hash":"","external_library_url":"","external_library_md5":""},"test_case_data_list":[{"test_case_name":"t0","input":"\"Hello\"","output":"\"Helo\"","secret":false},{"test_case_name":"t1","input":"\"CloudCoder\"","output":"\"Clouoder\"","secret":false},{"test_case_name":"t2","input":"\"AB\"","output":"\"\"","secret":false},{"test_case_name":"t3","input":"\"abc\"","output":"\"ac\"","secret":false},{"test_case_name":"t4","input":"\"abcd\"","output":"\"ad\"","secret":false},{"test_case_name":"t5","input":"\"aaaaaaaaaaaaaaaaaaaaa\"","output":"\"aaaaaaaaaaaaaaaaaaaa\"","secret":false},{"test_case_name":"t6","input":"\"aaaaaaaaaaaaaaaaaaaaaa\"","output":"\"aaaaaaaaaaaaaaaaaaaa\"","secret":false},{"test_case_name":"t7","input":"\"a\"","output":"\"\"","secret":false}]},
{"problem_data":{"problem_type":0,"testname":"atLeastOnePositive","brief_description":"Check if at least one int is positive.","description":"Write a static method that takes three ints as parameters and returns true if <i>at least<\/i> one parameter is positive.\nFor example:\n<p>\natLeastOnePositive(0,-1,-2) -> false<br>\natLeastOnePositive(1,1,1) -> true<br>\natLeastOnePositive(1,1,-8) -> true<br>\n<\/p>","skeleton":"public static boolean atLeastOnePositive(int a, int b, int c)\n{\n    \n}","schema_version":1,"author_name":"Jaime Spacco","author_email":"jspacco@knox.edu","author_website":"","timestamp_utc":1359039623074,"license":1,"parent_hash":"","external_library_url":"","external_library_md5":""},"test_case_data_list":[{"test_case_name":"t0","input":"0,0,0","output":"false","secret":false},{"test_case_name":"t1","input":"1,0,0","output":"true","secret":false},{"test_case_name":"t2","input":"0,1,0","output":"true","secret":false},{"test_case_name":"t3","input":"0,0,1","output":"true","secret":false},{"test_case_name":"t4","input":"1,0,1","output":"true","secret":false},{"test_case_name":"t5","input":"1,1,1","output":"true","secret":false},{"test_case_name":"t6","input":"2, 99, 0","output":"true","secret":false},{"test_case_name":"t7","input":"-3, -9, 8","output":"true","secret":false},{"test_case_name":"t8","input":"-1,-2,-5","output":"false","secret":false}]},
{"problem_data":{"problem_type":0,"testname":"doubleChar","brief_description":"double a character","description":"","skeleton":"public static String doubleChar(String s)\n{\n    \n}","schema_version":1,"author_name":"Jaime Spacco","author_email":"jspacco@knox.edu","author_website":"","timestamp_utc":1360164727042,"license":1,"parent_hash":"","external_library_url":"","external_library_md5":""},"test_case_data_list":[{"test_case_name":"t0","input":"\"The\"","output":"\"TThhee\"","secret":false},{"test_case_name":"t1","input":"\"Hi-there\"","output":"\"HHii--tthheerree\"","secret":false},{"test_case_name":"t2","input":"\"\"","output":"\"\"","secret":false},{"test_case_name":"t3","input":"\"a\"","output":"\"aa\"","secret":false},{"test_case_name":"t4","input":"\" \"","output":"\"  \"","secret":false},{"test_case_name":"t5","input":"\"abcd\"","output":"\"aabbccdd\"","secret":false},{"test_case_name":"t6","input":"\"AAA\"","output":"\"AAAAAA\"","secret":false}]},
{"problem_data":{"problem_type":0,"testname":"countNumChar","brief_description":"count the number of occurrences of a char","description":"Count the number of occurences of a given character in a String.\nFor example:\n<p>\ncountNumChar(\"abcda\", 'a') -> 2\ncountNumChar(\"Hello\", 'h') -> 0\ncountNumChar(\"\", 'z') -> 0\n<\/p>","skeleton":"public static int countNumChar(String s, char ch)\n{\n    \n}","schema_version":1,"author_name":"Jaime Spacco","author_email":"jspacco@knox.edu","author_website":"","timestamp_utc":1360300217542,"license":1,"parent_hash":"","external_library_url":"","external_library_md5":""},"test_case_data_list":[{"test_case_name":"t0","input":"\"abcda\", 'a'","output":"2","secret":false},{"test_case_name":"t1","input":"\"Hello\", 'h'","output":"0","secret":false},{"test_case_name":"t2","input":"\"\", 'z'","output":"0","secret":false},{"test_case_name":"t3","input":"\"aaa\", 'a'","output":"3","secret":false},{"test_case_name":"t4","input":"\"a b c d it is snowing\", 'i'","output":"3","secret":false}]},
{"problem_data":{"problem_type":0,"testname":"countNumString","brief_description":"count number of occurrences of a String","description":"Count the number of times a String occurs inside another String.\n(The String you're looking for should be the 2nd parameter)\nFor example:\n<p>\ncountNumString(\"hello there\", \"the\") -> 1\ncountNumString(\"hello yellow jello\", \"ll\") -> 3\ncountNumString(\"hello\", \"hellohello\") -> 0\n<\/p>\n<p>\nHint:  Check out the indexOf() function.\n<\/p>","skeleton":"public static int countNumString(String s, String find)\n{\n    \n}","schema_version":1,"author_name":"Jaime Spacco","author_email":"jspacco@knox.edu","author_website":"","timestamp_utc":1360300503569,"license":1,"parent_hash":"","external_library_url":"","external_library_md5":""},"test_case_data_list":[{"test_case_name":"t0","input":"\"hello there\", \"the\"","output":"1","secret":false},{"test_case_name":"t1","input":"\"hello yellow jello\", \"ll\"","output":"3","secret":false},{"test_case_name":"t2","input":"\"hello\", \"hellohello\"","output":"0","secret":false},{"test_case_name":"t3","input":"\"abcd\", \"a\"","output":"1","secret":false},{"test_case_name":"t4","input":"\"hello\", \"hello\"","output":"1","secret":false},{"test_case_name":"t5","input":"\"read read read please read\", \"read\"","output":"4","secret":false}]},
{"problem_data":{"problem_type":0,"testname":"everyOtherChar0","brief_description":"return a String made up of every other char","description":"Return a String made up of every other char of the input String,\nstarting with the first character (i.e. at index 0).  For example:\n<pre>\neveryOtherChar0(\"abcd\") -> \"ac\"\neveryOtherChar0(\"abc\") -> \"ac\"\neveryOtherChar0(\"ab\") -> \"a\"\n<\/pre>","skeleton":"public static String everyOtherChar0(String s)\n{\n    \n}","schema_version":1,"author_name":"Jaime Spacco","author_email":"jspacco@knox.edu","author_website":"","timestamp_utc":1360301190882,"license":1,"parent_hash":"","external_library_url":"","external_library_md5":""},"test_case_data_list":[{"test_case_name":"t0","input":"\"abcd\"","output":"\"ac\"","secret":false},{"test_case_name":"t1","input":"\"abc\"","output":"\"ac\"","secret":false},{"test_case_name":"t2","input":"\"ab\"","output":"\"a\"","secret":false},{"test_case_name":"t3","input":"\"\"","output":"\"\"","secret":false},{"test_case_name":"t4","input":"\"xyzabcdabcd\"","output":"\"xzbdbd\"","secret":false}]},
{"problem_data":{"problem_type":0,"testname":"everyOtherChar1","brief_description":"every other char starting at index 1","description":"Return a new String containing every other char of the\nparameter String, starting at index 1.  For example:\n<p>\n<pre>\neveryOtherChar1(\"abcd\") -> \"bd\"\neveryOtherChar1(\"abc\") -> \"b\"\neveryOtherChar1(\"abcde\") -> \"bd\"\n<\/pre>\n<\/p>","skeleton":"public static String everyOtherChar1(String s)\n{\n    \n}","schema_version":1,"author_name":"Jaime Spacco","author_email":"jspacco@knox.edu","author_website":"","timestamp_utc":1360302792739,"license":1,"parent_hash":"","external_library_url":"","external_library_md5":""},"test_case_data_list":[{"test_case_name":"t0","input":"\"abcd\"","output":"\"bd\"","secret":false},{"test_case_name":"t1","input":"\"abc\"","output":"\"b\"","secret":false},{"test_case_name":"t2","input":"\"abcde\"","output":"\"bd\"","secret":false},{"test_case_name":"t3","input":"\"\"","output":"\"\"","secret":false},{"test_case_name":"t4","input":"\"a\"","output":"\"\"","secret":false}]},
{"problem_data":{"problem_type":0,"testname":"nChar","brief_description":"copy each char n times","description":"Given a String s and an int n, return a new String where each\nchar in s is copied n times.\n<p>\n<pre>\nnChar(\"abcd\", 1) -> \"abcd\"\nnChar(\"abcd\", 2) -> \"aabbccdd\"\nnChar(\"abcd\", 3) -> \"aaabbbcccddd\"\nnChar(\"abcd\", 0) -> \"\"\n<\/pre>\n<\/p>","skeleton":"public static String nChar(String s, int n)\n{\n    \n}","schema_version":1,"author_name":"Jaime Spacco","author_email":"jspacco@knox.edu","author_website":"","timestamp_utc":1360304521612,"license":1,"parent_hash":"","external_library_url":"","external_library_md5":""},"test_case_data_list":[{"test_case_name":"t0","input":"\"abcd\", 1","output":"\"abcd\"","secret":false},{"test_case_name":"t1","input":"\"abcd\", 2","output":"\"aabbccdd\"","secret":false},{"test_case_name":"t2","input":"\"abcd\", 3","output":"\"aaabbbcccddd\"","secret":false},{"test_case_name":"t3","input":"\"abcd\", 0","output":"\"\"","secret":false},{"test_case_name":"t4","input":"\"aa\", 4","output":"\"aaaaaaaa\"","secret":false},{"test_case_name":"t5","input":"\"\", 7","output":"\"\"","secret":false},{"test_case_name":"t6","input":"\"The\", 2","output":"\"TThhee\"","secret":false},{"test_case_name":"t7","input":"\"france\", 3","output":"\"fffrrraaannnccceee\"","secret":false}]},
{"problem_data":{"problem_type":0,"testname":"findMax","brief_description":"find the max in an array","description":"Find the maximum value in an array.\nFor example:\n<pre>\nfindMax({1,2,3,2,5,2,3}) => 5\nfindMax({5,5,5}) => 5\nfindMax({-1, -2, -3}) => -1\n<\/pre>","skeleton":"public static int findMax(int[] arr)\n{\n    \n}","schema_version":1,"author_name":"Jaime Spacco","author_email":"jspacco@knox.edu","author_website":"","timestamp_utc":1360732691527,"license":1,"parent_hash":"","external_library_url":"","external_library_md5":""},"test_case_data_list":[{"test_case_name":"t0","input":"new int[] {1,2,3,2,5,2,3}","output":"5","secret":false},{"test_case_name":"t1","input":"new int[] {5,5,5}","output":"5","secret":false},{"test_case_name":"t2","input":"new int[] {-1, -2, -3}","output":"-1","secret":false},{"test_case_name":"t3","input":"new int[] {-5}","output":"-5","secret":false},{"test_case_name":"t4","input":"new int[] {100, 99, 98, 97}","output":"100","secret":false},{"test_case_name":"t5","input":"new int[] {99, 98, 100, 97}","output":"100","secret":false}]},
{"problem_data":{"problem_type":0,"testname":"countChar","brief_description":"count how many times a given char occurs","description":"Count the number of occurences of the given char.\nFor example:\n<pre>\ncountChar(\"my cat is catacular\", 'a') => 3\ncountChar(\"my cat is catacular\", 'z') => 0\ncountChar(\"my cat is catacular\", 't') => 2\n<\/pre>","skeleton":"public static int countChar(String s, char ch)\n{\n    \n}","schema_version":1,"author_name":"Jaime Spacco","author_email":"jspacco@knox.edu","author_website":"","timestamp_utc":1360732317169,"license":1,"parent_hash":"","external_library_url":"","external_library_md5":""},"test_case_data_list":[{"test_case_name":"t0","input":"\"my cat is catacular\", 'a'","output":"4","secret":false},{"test_case_name":"t1","input":"\"my cat is catacular\", 'z'","output":"0","secret":false},{"test_case_name":"t2","input":"\"my cat is catacular\", 't'","output":"2","secret":false},{"test_case_name":"t3","input":"\"\", 'a'","output":"0","secret":false},{"test_case_name":"t4","input":"\"z\", 'a'","output":"0","secret":false},{"test_case_name":"t5","input":"\"w\", 'w'","output":"1","secret":false},{"test_case_name":"t6","input":"\"abcq\", 'q'","output":"1","secret":false},{"test_case_name":"t7","input":"\"aaaaaa\", 'a'","output":"6","secret":false}]},
{"problem_data":{"problem_type":0,"testname":"countCharsAfterFirst","brief_description":"count occurence of ch1 after ch2 occurs","description":"Count the number of times ch2 occurs after the first\noccurence of ch1.  If ch1 never occurs, return 0.  For example:\n<pre>\ncountCharsAfterFirst(\"abcda\", 'a', 'b') => 1\ncountCharsAfterFirst(\"abcda\", 'a', 'z') => 0\ncountCharsAfterFirst(\"abcda\", 'a', 'a') => 1\n<\/pre>","skeleton":"public static int countCharsAfterFirst(String s, char ch1, char ch2)\n{\n    \n}","schema_version":1,"author_name":"Jaime Spacco","author_email":"jspacco@knox.edu","author_website":"","timestamp_utc":1360730490630,"license":1,"parent_hash":"","external_library_url":"","external_library_md5":""},"test_case_data_list":[{"test_case_name":"t0","input":"\"abcda\", 'a', 'b'","output":"1","secret":false},{"test_case_name":"t1","input":"\"abcda\", 'a', 'z'","output":"0","secret":false},{"test_case_name":"t2","input":"\"abcda\", 'a', 'a'","output":"1","secret":false},{"test_case_name":"t3","input":"\"a\", 'a', 'a'","output":"0","secret":false},{"test_case_name":"t4","input":"\"aaaa\", 'a', 'a'","output":"3","secret":false},{"test_case_name":"t5","input":"\"hello jello\", 'e', 'l'","output":"4","secret":false},{"test_case_name":"t6","input":"\"hello jello\", 'j', 'l'","output":"2","secret":false},{"test_case_name":"t7","input":"\"hello jello\", 'j', 'h'","output":"0","secret":false}]},
{"problem_data":{"problem_type":0,"testname":"countCharsOutsideRange","brief_description":"count chars outside a given range","description":"Count the number of times a given char occurs <b>OUTSIDE<\/b> a given range\nof a String parameter\n(i.e. starting at a given <i>start<\/i> index, and up to but not including \nand <i>end<\/i>index).  For example:\n<pre>\ncountCharsOutsideRange(\"abcdaba\", 'a', 1, 4) => 3\ncountCharsOutsideRange(\"abcdaba\", 'a', 0, 6) => 1\ncountCharsOutsideRange(\"abcdaba\", 'a', 0, 0) => 3\n<\/pre>","skeleton":"public static int countCharsOutsideRange(String s, char ch, int start, int end)\n{\n    \n}","schema_version":1,"author_name":"Jaime Spacco","author_email":"jspacco@knox.edu","author_website":"","timestamp_utc":1360729858603,"license":1,"parent_hash":"","external_library_url":"","external_library_md5":""},"test_case_data_list":[{"test_case_name":"t0","input":"\"abcdaba\", 'a', 1, 4","output":"3","secret":false},{"test_case_name":"t1","input":"\"abcdaba\", 'a', 0, 6","output":"1","secret":false},{"test_case_name":"t2","input":"\"abcdaba\", 'a', 0, 0","output":"3","secret":false},{"test_case_name":"t3","input":"\"cccccccc\", 'c', 3, 5","output":"6","secret":false},{"test_case_name":"t4","input":"\"ccccccccc\", 'c', 3, 7","output":"5","secret":false},{"test_case_name":"t5","input":"\"aaaaccccaaaa\", 'c', 0, 4","output":"4","secret":false},{"test_case_name":"t6","input":"\"aaaaccccaaaa\", 'c', 4, 8","output":"0","secret":false},{"test_case_name":"t7","input":"\"aaaaccccaaaa\", 'c', 4, 5","output":"3","secret":false}]},
{"problem_data":{"problem_type":0,"testname":"countCharsInRange","brief_description":"count the occurences of a given char in a given range","description":"Count the number of times a given char occurs in a given range\nof a String parameter\n(i.e. starting at a given <i>start<\/i> index, and up to but not \nincluding and <i>end<\/i> index).  If <i>end<\/i> is greater than the \nlength of the String, then the method should stop looking \nat the end of the String.  For example:\n<pre>\ncountCharsInRange(\"abcdaba\", 'a', 1, 4) => 0\ncountCharsInRange(\"abcdaba\", 'a', 0, 6) => 2\ncountCharsInRange(\"abcdaba\", 'a', 0, 0) => 0\ncountCharsInRange(\"abcdaba\", 'a', 0, 100) => 3\n<\/pre>","skeleton":"public static int countCharsInRange(String s, char ch, int start, int end)\n{\n    \n}","schema_version":1,"author_name":"Jaime Spacco","author_email":"jspacco@knox.edu","author_website":"","timestamp_utc":1360729493035,"license":1,"parent_hash":"","external_library_url":"","external_library_md5":""},"test_case_data_list":[{"test_case_name":"t0","input":"\"abcdaba\", 'a', 1, 4","output":"0","secret":false},{"test_case_name":"t1","input":"\"abcdaba\", 'a', 0, 6","output":"2","secret":false},{"test_case_name":"t2","input":"\"abcdaba\", 'a', 0, 0","output":"0","secret":false},{"test_case_name":"t3","input":"\"cccccccc\", 'c', 3, 5","output":"2","secret":false},{"test_case_name":"t4","input":"\"cccccccc\", 'c', 3, 7","output":"4","secret":false},{"test_case_name":"t5","input":"\"cccccccc\", 'c', 0, 4","output":"4","secret":false},{"test_case_name":"t6","input":"\"ccccaaaa\", 'c', 0, 4","output":"4","secret":false},{"test_case_name":"t7","input":"\"ccccaaaa\", 'a', 0, 4","output":"0","secret":false},{"test_case_name":"t8","input":"\"c\", 'c', 0, 100","output":"1","secret":false}]},
{"problem_data":{"problem_type":0,"testname":"countA","brief_description":"count number of As in a String","description":"Count the number of occurences of the char 'a' in a String.\nFor example:\n<p>\n<pre>\ncountA(\"abcda\") => 2\ncountA(\"\") => 0\ncountA(\"ardently arduous\") => 2\n<\/pre>\n<\/p>","skeleton":"public static int countA(String s)\n{\n    \n}","schema_version":1,"author_name":"Jaime Spacco","author_email":"jspacco@knox.edu","author_website":"","timestamp_utc":1360729276717,"license":1,"parent_hash":"","external_library_url":"","external_library_md5":""},"test_case_data_list":[{"test_case_name":"t0","input":"\"abcda\"","output":"2","secret":false},{"test_case_name":"t1","input":"\"\"","output":"0","secret":false},{"test_case_name":"t2","input":"\"ardently arduous\"","output":"2","secret":false},{"test_case_name":"t3","input":"\"aaa\"","output":"3","secret":false},{"test_case_name":"t4","input":"\"123\"","output":"0","secret":false},{"test_case_name":"t5","input":"\"a\"","output":"1","secret":false}]},
{"problem_data":{"problem_type":0,"testname":"reverse","brief_description":"reverse the characters in a String","description":"Reverse the characters in a String.  For example:\n<p>\n<pre>\nreverse(\"abcd\") -> \"dcba\"\nreverse(\"\") -> \"\"\nreverse(\"abc\") -> \"cba\"\n<\/pre>\n<\/p>","skeleton":"public static String reverse(String s)\n{\n    \n}","schema_version":1,"author_name":"Jaime Spacco","author_email":"jspacco@knox.edu","author_website":"","timestamp_utc":1360305922569,"license":1,"parent_hash":"","external_library_url":"","external_library_md5":""},"test_case_data_list":[{"test_case_name":"t0","input":"\"abcd\"","output":"\"dcba\"","secret":false},{"test_case_name":"t1","input":"\"abc\"","output":"\"cba\"","secret":false},{"test_case_name":"t2","input":"\"\"","output":"\"\"","secret":false},{"test_case_name":"t3","input":"\"a\"","output":"\"a\"","secret":false},{"test_case_name":"t4","input":"\"aabbc\"","output":"\"cbbaa\"","secret":false}]},
{"problem_data":{"problem_type":0,"testname":"containsNM","brief_description":"Check if an array contains N and M","description":"Given an array of ints and two ints n and m, return true if n\nand m occur next to each ohter (in any order) in the array.\nFor example:\n<pre>\ncontainsNM({1,2,3}, 2, 3) => true\ncontainsNM({1,2,3}, 3, 4) => false\ncontainsNM({7, 8, 3}, 3, 8) => true\ncontainsNM({}, 7, 3) => false\n<\/pre>","skeleton":"public static boolean containsNM(int[] arr, int n, int m)\n{\n    \n}","schema_version":1,"author_name":"Jaime Spacco","author_email":"jspacco@knox.edu","author_website":"","timestamp_utc":1360865024005,"license":1,"parent_hash":"","external_library_url":"","external_library_md5":""},"test_case_data_list":[{"test_case_name":"t0","input":"new int[] {1,2,3}, 2, 3","output":"true","secret":false},{"test_case_name":"t1","input":"new int[] {1,2,3}, 3, 4","output":"false","secret":false},{"test_case_name":"t2","input":"new int[] {}, 7, 8","output":"false","secret":false},{"test_case_name":"t3","input":"new int[] {6, 3, 4, 8, 3, 2, 6}, 8, 2","output":"false","secret":false},{"test_case_name":"t4","input":"new int[] {6, 3, 4, 8, 3, 2, 6}, 8, 3","output":"true","secret":false},{"test_case_name":"t5","input":"new int[] {6, 3, 4, 8, 3, 2, 6}, 3, 8","output":"true","secret":false}]},
{"problem_data":{"problem_type":0,"testname":"notContainsNM","brief_description":"Check if n and m never occur next to each other","description":"Given an array of ints and two ints n and m, return true if n\nand m <i>never<\/i>occur next to each ohter (in any order) in the array.\nFor example:\n<pre>\ncontainsNM({1,2,3}, 2, 3) => false\ncontainsNM({1,2,3}, 3, 4) => true\ncontainsNM({7, 8, 3}, 3, 8) => false\ncontainsNM({}, 7, 3) => true\n<\/pre>","skeleton":"public static boolean notContainsNM(int[] arr, int n, int m)\n{\n    \n}","schema_version":1,"author_name":"Jaime Spacco","author_email":"jspacco@knox.edu","author_website":"","timestamp_utc":1360865341538,"license":1,"parent_hash":"","external_library_url":"","external_library_md5":""},"test_case_data_list":[{"test_case_name":"t0","input":"new int[] {1,2,3}, 2, 3","output":"false","secret":false},{"test_case_name":"t1","input":"new int[] {1,2,3}, 3, 4","output":"true","secret":false},{"test_case_name":"t2","input":"new int[] {}, 7, 8","output":"true","secret":false},{"test_case_name":"t3","input":"new int[] {3,4,5,6,3,4,6,4,4}, 4, 4","output":"false","secret":false},{"test_case_name":"t4","input":"new int[] {3,4,5,6,3,8,6,4,4}, 4, 6","output":"false","secret":false},{"test_case_name":"t5","input":"new int[] {3,4,5,6,3,8,6,4,4}, 6, 4","output":"false","secret":false},{"test_case_name":"t6","input":"new int[] {3,4,5,6,3,4,6,4,4, 8}, 5, 8","output":"true","secret":false}]},
{"problem_data":{"problem_type":0,"testname":"notContainsN","brief_description":"Check if an array does not contain N","description":"Given an array of ints and an int n, return true if the\narray <b>does not<\/b>contain n, and false otherwise.\nFor example:\n<pre>\nnotContainsN({1,2,3}, 3) => false\nnotContainsN({1,2,3}, 5) => true\nnotContainsN({}, 5) => true\n<\/pre>","skeleton":"public static boolean notContainsN(int[] arr, int n)\n{\n    \n}","schema_version":1,"author_name":"Jaime Spacco","author_email":"jspacco@knox.edu","author_website":"","timestamp_utc":1360864551514,"license":1,"parent_hash":"","external_library_url":"","external_library_md5":""},"test_case_data_list":[{"test_case_name":"t0","input":"new int[] {1,2,3}, 3","output":"false","secret":false},{"test_case_name":"t1","input":"new int[] {1,2,3}, 5","output":"true","secret":false},{"test_case_name":"t2","input":"new int[] {}, 5","output":"true","secret":false},{"test_case_name":"t3","input":"new int[] {4, 5, 6, 4, 5}, 4","output":"false","secret":false},{"test_case_name":"t4","input":"new int[] {4, 5, 6, 8}, 8","output":"false","secret":false}]},
{"problem_data":{"problem_type":0,"testname":"containsN","brief_description":"Does an array contain N?","description":"Given an array of ints and an int n, return true if n\noccurs in the array.  For example:\n<pre>\ncontainsN({1,2,3}, 3) => true\ncontainsN({1,2,3}, 5) => false\ncontainsN({}, 8) => false\n<\/pre>","skeleton":"public static boolean containsN(int[] arr, int n)\n{\n    \n}","schema_version":1,"author_name":"Jaime Spacco","author_email":"jspacco@knox.edu","author_website":"","timestamp_utc":1360864311481,"license":1,"parent_hash":"","external_library_url":"","external_library_md5":""},"test_case_data_list":[{"test_case_name":"t0","input":"new int[] {1,2,3}, 3","output":"true","secret":false},{"test_case_name":"t1","input":"new int[] {1,2,3}, 7","output":"false","secret":false},{"test_case_name":"t2","input":"new int[] {}, 5","output":"false","secret":false},{"test_case_name":"t3","input":"new int[] {7, 8, 4, 6}, 7","output":"true","secret":false},{"test_case_name":"t4","input":"new int[] {4, 2, 6, 9}, 9","output":"true","secret":false}]},
{"problem_data":{"problem_type":0,"testname":"numTimes","brief_description":"Count how many times a number occurs","description":"Given an array of ints and an int, count the number of times\nthe given int occurs in the array.  For example:\n<pre>\nnumTimes({1,2,3,4,2,1}, 1) => 2\nnumTimes({1,2,3,4,5,4,3,2,1}, 7) => 0\nnumTimes({5,6,7,4,2,4,5,2,6,7,3,4,2}, 2) => 3\n<\/pre>","skeleton":"public static int numTimes(int arr[], int val)\n{\n    \n}","schema_version":1,"author_name":"Jaime Spacco","author_email":"jspacco@knox.edu","author_website":"","timestamp_utc":1360855439754,"license":1,"parent_hash":"","external_library_url":"","external_library_md5":""},"test_case_data_list":[{"test_case_name":"t0","input":"new int[] {1,2,3,4,2,1}, 2","output":"2","secret":false},{"test_case_name":"t1","input":"new int[] {1,2,3,4,5,4,3,2,1}, 7","output":"0","secret":false},{"test_case_name":"t2","input":"new int[] {5,6,7,4,2,4,5,2,6,7,3,4,2}, 2","output":"3","secret":false},{"test_case_name":"t3","input":"new int[] {}, 5","output":"0","secret":false},{"test_case_name":"t4","input":"new int[] {1,1,1}, 1","output":"3","secret":false}]},
{"problem_data":{"problem_type":0,"testname":"findMin","brief_description":"find the minimum value of an array","description":"Find the minimum value of an array.  For example:\n<pre>\nfindMin({1,2,3}) => 1\nfindMin({-1,-2,-3}) => -3\nfindMin({-1,5,99}) => -1\n<\/pre>","skeleton":"public static int findMin(int[] arr)\n{\n    \n}","schema_version":1,"author_name":"Jaime Spacco","author_email":"jspacco@knox.edu","author_website":"","timestamp_utc":1360854208172,"license":1,"parent_hash":"","external_library_url":"","external_library_md5":""},"test_case_data_list":[{"test_case_name":"t0","input":"new int[] {1,2,3}","output":"1","secret":false},{"test_case_name":"t1","input":"new int[] {-1,-2,-3}","output":"-3","secret":false},{"test_case_name":"t2","input":"new int[] {-1, 5, 99}","output":"-1","secret":false},{"test_case_name":"t3","input":"new int[] {11, 4, 99, 7}","output":"4","secret":false}]},
{"problem_data":{"problem_type":0,"testname":"minIndex","brief_description":"Find the index of the min value","description":"Return the index (the <i>index<\/i>, not the <i>value<\/i>) of\nthe minimum value.\n<pre>\nminIndex({4, 5, 2, 9, 1}) => 4\nminIndex({-1, -2, -3, -7, 11, 9}) => 3\nminIndex({0, -1}) => 1\n<\/pre>","skeleton":"public static int minIndex(int[] arr)\n{\n    \n}","schema_version":1,"author_name":"Jaime Spacco","author_email":"jspacco@knox.edu","author_website":"","timestamp_utc":1360854417727,"license":1,"parent_hash":"","external_library_url":"","external_library_md5":""},"test_case_data_list":[{"test_case_name":"t0","input":"new int[] {4, 5, 2, 9, 1}","output":"4","secret":false},{"test_case_name":"t1","input":"new int[] {-1, -2, -3, -7, 11, 9}","output":"3","secret":false},{"test_case_name":"t2","input":"new int[] {0, -1}","output":"1","secret":false},{"test_case_name":"t3","input":"new int[] {5}","output":"0","secret":false},{"test_case_name":"t4","input":"new int[] {4, -1, 8, 0, 0, 4, -1}","output":"1","secret":false}]},
{"problem_data":{"problem_type":0,"testname":"findSum","brief_description":"find the sum of elements of an array","description":"Find the sum of the elements of an array of ints.\nFor example:\n<pre>\nfindSum({1,2,3}) => 6\nfindSum({-1, 0, 1} => 0\nfindSum({}) => 0\n<\/pre>","skeleton":"public static int findSum(int[] arr)\n{\n    \n}","schema_version":1,"author_name":"Jaime Spacco","author_email":"jspacco@knox.edu","author_website":"","timestamp_utc":1360733760405,"license":1,"parent_hash":"","external_library_url":"","external_library_md5":""},"test_case_data_list":[{"test_case_name":"t0","input":"new int[] {1,2,3}","output":"6","secret":false},{"test_case_name":"t1","input":"new int[] {-1, 0, 1}","output":"0","secret":false},{"test_case_name":"t2","input":"new int[] {}","output":"0","secret":false},{"test_case_name":"t3","input":"new int[] {5}","output":"5","secret":false},{"test_case_name":"t4","input":"new int[] {-5, 1, 2}","output":"-2","secret":false}]},
{"problem_data":{"problem_type":0,"testname":"mid3","brief_description":"return the middle of 3 values","description":"Write a function called mid3 that takes 3 ints as parameters\nand returns the middle value.  For example:\n<pre>\nmid3(3, 4, 5) => 4\nmid3(-5, 8, 3) => 3\nmid3(5, 4, 3) => 4\n<\/pre>","skeleton":"public static int mid3(int a, int b, int c)\n{\n    \n}","schema_version":1,"author_name":"Jaime Spacco","author_email":"jspacco@knox.edu","author_website":"","timestamp_utc":1361412259597,"license":1,"parent_hash":"","external_library_url":"","external_library_md5":""},"test_case_data_list":[{"test_case_name":"t0","input":"3, 4, 5","output":"4","secret":false},{"test_case_name":"t1","input":"-5, 8, 3","output":"3","secret":false},{"test_case_name":"t2","input":"5, 4, 3","output":"4","secret":false},{"test_case_name":"t3","input":"2, 77, 984","output":"77","secret":false},{"test_case_name":"t4","input":"2, 984, 77","output":"77","secret":false},{"test_case_name":"t5","input":"3, 1, 2","output":"2","secret":false}]},
{"problem_data":{"problem_type":0,"testname":"sumAbove","brief_description":"sum the value of all the numbers greater than a given number","description":"Write a function (static method) called sumAbove that takes an \narray of ints and an int as parameters and returns the sum of the \nvalues in the array that are strictly greater than the given number. \nFor example:\n<pre>\nsumAbove({5, 8, 11, 2, 10}, 8) => 21\nsumAbove({5, 8, 11, 2, 10}, 20) => 0\nsumAbove({5, 8, 11, 2, 10}, 7) => 29\n<\/pre>","skeleton":"public static int sumAbove(int[] arr, int num)\n{\n    \n}","schema_version":1,"author_name":"Jaime Spacco","author_email":"jspacco@knox.edu","author_website":"","timestamp_utc":1361412500303,"license":1,"parent_hash":"","external_library_url":"","external_library_md5":""},"test_case_data_list":[{"test_case_name":"t0","input":"new int[] {5, 8, 11, 2, 10}, 8","output":"21","secret":false},{"test_case_name":"t1","input":"new int[] {5, 8, 11, 2, 10}, 20","output":"0","secret":false},{"test_case_name":"t2","input":"new int[] {5, 8, 11, 2, 10}, 7","output":"29","secret":false},{"test_case_name":"t3","input":"new int[] {5, 5, 5, 5, 5}, 4","output":"25","secret":false},{"test_case_name":"t4","input":"new int[] {5, 8, 11, 2, 10, 10, 10}, 8","output":"41","secret":false},{"test_case_name":"t5","input":"new int[] {-5, -4, -6, -11}, -10","output":"-15","secret":false}]},
{"problem_data":{"problem_type":4,"testname":"Reverse_intV2","brief_description":"Read two integers","description":"<p>Read two integers from the standard input and write to the standard output in reverse order.<\/p>","skeleton":"import java.util.Scanner;\n\npublic class Test {\n\npublic static void main(String[] args) {\n    Scanner s = new Scanner(System.in);\n    \n    return 0;\n}\n}","schema_version":1,"author_name":"Jachimiak","author_email":"","author_website":"","timestamp_utc":1360611528573,"license":1,"parent_hash":"","external_library_url":"","external_library_md5":""},"test_case_data_list":[{"test_case_name":"t0","input":"1 1","output":"1 1","secret":false},{"test_case_name":"t1","input":"1 2","output":"2 1","secret":false},{"test_case_name":"t2","input":"2 0","output":"0 2","secret":false}]},
{"problem_data":{"problem_type":4,"testname":"DataTypeString","brief_description":"Using a String in Java.","description":"<p>Strings are words or phrases like <code>\"I'm learning Java!\"<\/code>. \nIt is important to note that strings are surrounded by quotes.\n<\/p>\n<p>Find the string <code>\"Goodbye\"<\/code> and replace it with the string\n    <code>\"Hello\"<\/code>\n<\/p>","skeleton":"public class myString\n{\n       public static void main(String[] args){\n        String my_string = \"Goodbye\";\n        \/\/This is code is for the test\n        System.out.println(my_string);\n    }\n}","schema_version":3,"author_name":"Mr. Teacher","author_email":"jgbmsband@gmail.com","author_website":"catalystctc.com","timestamp_utc":1363919255905,"license":1,"parent_hash":"","external_library_url":"","external_library_md5":""},"test_case_data_list":[{"test_case_name":"t0","input":"","output":"Hello","secret":false}]},
{"problem_data":{"problem_type":4,"testname":"DataTypeInteger","brief_description":"Using Integers in Java","description":"<p>Integers are natural numbers, or numbers without decimals.\nFor example, these are integers:\n<ul>\n    <li>42<\/li>\n    <li>365<\/li>\n    <li>-1000<\/li>\n<\/ul><\/p>\n<p>And these are not integers:\n    <ul>\n        <li>3.14<\/li>\n        <li>51%<\/li>\n        <li>3.7777777<\/li>\n    <\/ul>\n<\/p>\n<p>Find the float <code>3.14<\/code> and replace it with the integer\n    <code>123<\/code>\n<\/p>","skeleton":"public class myInteger\n{\n       public static void main(String[] args){\n        int my_integer = 3.14;\n        \/\/This is code is for the test\n        System.out.println(my_integer);\n    }\n}","schema_version":3,"author_name":"Mr. Teacher","author_email":"jgbmsband@gmail.com","author_website":"catalystctc.com","timestamp_utc":1363922288034,"license":1,"parent_hash":"","external_library_url":"","external_library_md5":""},"test_case_data_list":[{"test_case_name":"t0","input":"","output":"123","secret":false}]},
{"problem_data":{"problem_type":4,"testname":"DataTypeBoolean","brief_description":"Using Booleans in Java","description":"<p>A variable is referred to as Boolean if it can hold a \nvalue that is either true or false.<\/p>\n<p>Find the Boolean <code>false<\/code> and replace it with the boolean\n    <code>true<\/code>\n<\/p>\n\n\n","skeleton":"public class myBoolean\n{\n       public static void main(String[] args){\n        boolean my_bool = false;\n        \/\/This is code is for the test\n        System.out.println(my_bool);\n    }\n}","schema_version":3,"author_name":"Mr. Teacher","author_email":"jgbmsband@gmail.com","author_website":"catalystctc.com","timestamp_utc":1363923150912,"license":1,"parent_hash":"","external_library_url":"","external_library_md5":""},"test_case_data_list":[{"test_case_name":"t0","input":"","output":"true","secret":false}]},
{"problem_data":{"problem_type":0,"testname":"countAB","brief_description":"Count number of 'ab' in the String","description":"Write a static method called countAB that takes a String as a parameter and returns the number of times that ab occurs (i.e. an 'a' immediately followed by 'b').\n<p>\ncountAB(\"abc\") -> 1<br>\ncountAB(\"acb\") -> 0<br>\ncountAB(\"ababbc\") -> 2<br>\n<\/p>","skeleton":"public static int countAB(String str)\n{\n    \/\/ code goes here\n}","schema_version":1,"author_name":"Jaime Spacco","author_email":"jspacco@knox.edu","author_website":"","timestamp_utc":1358741989984,"license":1,"parent_hash":"","external_library_url":"","external_library_md5":""},"test_case_data_list":[{"test_case_name":"t0","input":"\"abc\"","output":"1","secret":false},{"test_case_name":"t1","input":"\"azzzb\"","output":"0","secret":false},{"test_case_name":"t2","input":"\"a\"","output":"0","secret":false},{"test_case_name":"t3","input":"\"b\"","output":"0","secret":false}]},
{"problem_data":{"problem_type":0,"testname":"lastEven","brief_description":"Find the last even number in a 2d array","description":"<p>Given a 2d integer array (an array of arrays!), \nsearch through and return the last even number found. Assume that all arrays passed will contain at least one even number.<\/p>","skeleton":"public int lastEven(int[][] arr){\r\n    \/\/ TO DO - Find the last even number!\r\n}","schema_version":4,"author_name":"Ian Edgeley","author_email":"ian@iedgeley.com","author_website":"http:\/\/www.iedgeley.com","timestamp_utc":1382632182096,"license":1,"parent_hash":"","external_library_url":"","external_library_md5":""},"test_case_data_list":[{"test_case_name":"t0","input":"new int[][] {{1,2,4},{2,4,7},{2,6,7}}","output":"6","secret":false},{"test_case_name":"t1","input":"new int[][] {{1,2,4},{2,4,7},{2,6,8}}","output":"8","secret":false},{"test_case_name":"t2","input":"new int[][] {{1,2,4},{2,4,7,8},{2,6,7}}","output":"6","secret":false},{"test_case_name":"t3","input":"new int[][] {{1,2,4},{2,4,7},{2,6,7,8,10}}","output":"10","secret":false},{"test_case_name":"t4","input":"new int[][] {{1,2,3},{2,3,7},{2,5,7}}","output":"2","secret":false}]},
{"problem_data":{"problem_type":0,"testname":"hexStringToInt","brief_description":"convert hexidecimal (base 16) string to integer","description":"<p>\n    Use <em>recursion<\/em> to convert a string of hexidecimal\n    digits to an integer.  Don't use a loop!\n<\/p>\n<p>\n    The \"digits\" of a hexidecimal number are in base 16.\n    0-9 are interpreted as usual, and the letters \"a\" through\n    \"f\" represent the values 10 through 15.\n    So, for example,\n<\/p>\n<blockquote>\n    c2b\n<\/blockquote>\n<p>\n    Represents the integer 3115, because \"c\" = 12, \"b\" = 11, and\n    12*16<sup>2<\/sup> + 2*16<sup>1<\/sup> + 11*16<sup>0<\/sup> = 3115.\n<\/p>\n<p>\n    You may assume that all of the letters in the input\n    string will be lower case.\n<\/p>\n<p>\n    Hints:\n<\/p>\n<ul>\n    <li>Think about what would be an appropriate base case.\n        The first thing the method should do is check a base case.\n    <\/li>\n    <li>The <code>length<\/code> method gets the length (number of\n        characters) of a string.\n    <\/li>\n    <li>Use the <code>charAt<\/code> method to get the character\n        value at a particular index in the string.\n    <\/li>\n    <li>The <code>substring<\/code> method returns a string that\n        contains all of the characters from a start index\n        (inclusive) to and end index (exclusive).\n        So, for example, <code>s.substring(0, s.length()-1)<\/code>\n        would return a string with all of the characters except\n        the last character.\n    <\/li>\n<\/ul>","skeleton":"public static int hexStringToInt(String s) {\n    \/\/ TODO: implement\n    \n}","schema_version":4,"author_name":"David Hovemeyer","author_email":"dhovemey@ycp.edu","author_website":"http:\/\/faculty.ycp.edu\/~dhovemey\/","timestamp_utc":1384352288664,"license":1,"parent_hash":"","external_library_url":"","external_library_md5":""},"test_case_data_list":[{"test_case_name":"t0","input":"\"c2b\"","output":"3115","secret":false},{"test_case_name":"t1","input":"\"8\"","output":"8","secret":false},{"test_case_name":"t2","input":"\"d\"","output":"13","secret":false},{"test_case_name":"t3","input":"\"40beef\"","output":"4243183","secret":false},{"test_case_name":"t4","input":"\"cafe\"","output":"51966","secret":false},{"test_case_name":"t5","input":"\"b00\"","output":"2816","secret":false}]},
{"problem_data":{"problem_type":0,"testname":"sumOfDigits","brief_description":"find sum of digits of an integer","description":"<p>\n    Use <em>recursion<\/em> to complete the <code>sumOfDigits<\/code>\n    method.  It takes an integer value as a parameter, and\n    returns the sum of the digits in the decimal representation\n    of that integer.  You may assume that the parameter\n    will be non-negative.\n<\/p>\n<p>\n    Examples:\n<\/p>\n<ul>\n    <li><code>sumOfDigits(0)<\/code> => 0<\/li>\n    <li><code>sumOfDigits(1)<\/code> => 1<\/li>\n    <li><code>sumOfDigits(12)<\/code> => 3<\/li>\n    <li><code>sumOfDigits(808)<\/code> => 16<\/li>\n    <li><code>sumOfDigits(90125)<\/code> => 17<\/li>\n<\/ul>\n<p>\n    Hints:\n<\/p>\n<ul>\n    <li>Think about an appropriate base case.  All recursive methods\n        should check to see if a base case has been reached\n        before doing anything else.\n    <\/li>\n    <li>If <code>n<\/code> is an <code>int<\/code>,\n        <code>n%10<\/code> computes the value of the rightmost\n        digit of <code>n<\/code>.\n    <\/li>\n    <li>If <code>n<\/code> is an <code>int<\/code>,\n        <code>n\/10<\/code> computes the value the integer that\n        contains all of the digits of <code>n<\/code>\n        <em>except<\/em> the rightmost digit.\n    <\/li>\n<\/ul>","skeleton":"public static int sumOfDigits(int n) {\n    \/\/ TODO: implement\n    \n}","schema_version":4,"author_name":"David Hovemeyer","author_email":"dhovemey@ycp.edu","author_website":"http:\/\/faculty.ycp.edu\/~dhovemey\/","timestamp_utc":1384354142541,"license":1,"parent_hash":"","external_library_url":"","external_library_md5":""},"test_case_data_list":[{"test_case_name":"t0","input":"0","output":"0","secret":false},{"test_case_name":"t1","input":"1","output":"1","secret":false},{"test_case_name":"t2","input":"12","output":"3","secret":false},{"test_case_name":"t3","input":"808","output":"16","secret":false},{"test_case_name":"t4","input":"90125","output":"17","secret":false}]},
{"problem_data":{"problem_type":0,"testname":"doubleCharacters","brief_description":"double all of the characters in a string recursively","description":"<p>\n    <em>Using recursion<\/em>,\n    complete the <code>doubleCharacters<\/code> method\n    so that it returns a string in which the characters of\n    the parameter string are doubled.\n    Examples:\n<\/p>\n<ul>\n    <li><code>doubleCharacters(\"\")<\/code> => <code>\"\"<\/code><\/li>\n    <li><code>doubleCharacters(\"a\")<\/code> => <code>\"a\"<\/code><\/li>\n    <li><code>doubleCharacters(\"abc\")<\/code> => <code>\"aabbcc\"<\/code><\/li>\n    <li><code>doubleCharacters(\"Hello\")<\/code> => <code>\"HHeelllloo\"<\/code><\/li>\n<\/ul>\n<p>\n    Hints:\n<\/p>\n<ul>\n    <li>The <code>substring<\/code> method can be used to get a string\n        containing the characters of the original string from a\n        start index (inclusive) to an end index (exclusive).\n        For example, <code>s.substring(1, s.length())<\/code>\n        returns a substring containing all of the characters\n        of <code>s<\/code> except for the first.\n    <\/li>\n    <li>\n        The <code>charAt<\/code> method can be used to return the\n        character at a specified index in a string.\n        For example, <code>s.charAt(0)<\/code> returns the first\n        character of <code>s<\/code>.\n    <\/li>\n    <li>\n        Make sure that your recursive call(s) make progress\n        towards a base case.\n    <\/li>\n    <li>\n        You can use string concatenation to construct the result\n        string.  For example, if <code>c<\/code> is a <code>char<\/code>\n        variable, then\n        <blockquote>\"\" + c + c<\/blockquote>\n        is a string that contains two repetitions of the\n        character that <code>c<\/code> contains.\n    <\/li>\n<\/ul>","skeleton":"public static String doubleCharacters(String s) {\n    \/\/ TODO\n    \n}","schema_version":4,"author_name":"David Hovemeyer","author_email":"dhovemey@ycp.edu","author_website":"http:\/\/faculty.ycp.edu\/~dhovemey\/","timestamp_utc":1384887337308,"license":1,"parent_hash":"","external_library_url":"","external_library_md5":""},"test_case_data_list":[{"test_case_name":"t0","input":"\"\"","output":"\"\"","secret":false},{"test_case_name":"t1","input":"\"a\"","output":"\"aa\"","secret":false},{"test_case_name":"t2","input":"\"abc\"","output":"\"aabbcc\"","secret":false},{"test_case_name":"t3","input":"\"Hello\"","output":"\"HHeelllloo\"","secret":false}]},
{"problem_data":{"problem_type":0,"testname":"binarySearch","brief_description":"recursively search for a value in a sequence","description":"<p>\n    The <code>binarySearch<\/code> method takes four parameters:\n<\/p>\n<ul>\n    <li><code>arr<\/code>, a <em>sorted<\/em> array of <code>int<\/code> values<\/li>\n    <li><code>searchVal<\/code>, an <code>int<\/code> value<\/li>\n    <li><code>start<\/code>, a start index (inclusive)<\/li>\n    <li><code>end<\/code>, an end index (exclusive)<\/li>\n<\/ul>\n<p>\n    The method should return the index of the occurrence\n    of <code>searchVal<\/code> within the range of indices\n    from <code>start<\/code> (inclusive) to <code>end<\/code>\n    (exclusive), if there is one.  Otherwise, it should return\n    <code>-1<\/code> to indicate that <code>searchVal<\/code>\n    does not occur within the specified range of indices.\n<\/p>\n<p>\n    You can use the fact that the array is sorted to make this\n    method very efficient.  A simple base case is a range that\n    does not contain any elements: this means that the\n    <code>searchVal<\/code> does not occur in the range and\n    <code>-1<\/code> should be returned.\n<\/p>\n<p>\n    If the range is nonempty, check the element in the middle\n    of the range.  If it matches the <code>searchVal<\/code>,\n    return its index: this is a successful search.  Otherwise,\n    see whether the middle element is greater than or less\n    than the <code>searchVal<\/code>.  If it's greater than\n    the <code>searchVal<\/code>, then the <code>searchVal<\/code>\n    must occur to the left of the middle element.  Otherwise,\n    it must occur to the right of the middle element.\n    A recursive call can then be used to continue the search.\n<\/p>","skeleton":"public static int binarySearch(int[] arr, int searchVal, int start, int end) {\n    \/\/ TODO: implement\n    \n}","schema_version":4,"author_name":"David Hovemeyer","author_email":"dhovemey@ycp.edu","author_website":"http:\/\/faculty.ycp.edu\/~dhovemey\/","timestamp_utc":1384959054339,"license":1,"parent_hash":"","external_library_url":"","external_library_md5":""},"test_case_data_list":[{"test_case_name":"t0","input":"new int[]{3, 5, 7, 9, 11, 14, 16, 18, 19, 21}, 14, 0, 10","output":"5","secret":false},{"test_case_name":"t1","input":"new int[]{3, 5, 7, 9, 11, 14, 16, 18, 19, 21}, 7, 0, 10","output":"2","secret":false},{"test_case_name":"t2","input":"new int[]{3, 5, 7, 9, 11, 14, 16, 18, 19, 21}, 5, 0, 10","output":"1","secret":false},{"test_case_name":"t3","input":"new int[]{3, 5, 7, 9, 11, 14, 16, 18, 19, 21}, 18, 0, 10","output":"7","secret":false},{"test_case_name":"t4","input":"new int[]{3, 5, 7, 9, 11, 14, 16, 18, 19, 21}, 16, 0, 10","output":"6","secret":false},{"test_case_name":"t5","input":"new int[]{3, 5, 7, 9, 11, 14, 16, 18, 19, 21}, 3, 0, 10","output":"0","secret":false},{"test_case_name":"t6","input":"new int[]{3, 5, 7, 9, 11, 14, 16, 18, 19, 21}, 21, 0, 10","output":"9","secret":false},{"test_case_name":"t7","input":"new int[]{3, 5, 7, 9, 11, 14, 16, 18, 19, 21}, 12, 0, 10","output":"-1","secret":false},{"test_case_name":"t8","input":"new int[]{3, 5, 7, 9, 11, 14, 16, 18, 19, 21}, 20, 0, 10","output":"-1","secret":false},{"test_case_name":"t9","input":"new int[]{3, 5, 7, 9, 11, 14, 16, 18, 19, 21}, 2, 0, 10","output":"-1","secret":false},{"test_case_name":"t10","input":"new int[]{3, 5, 7, 9, 11, 14, 16, 18, 19, 21}, 22, 0, 10","output":"-1","secret":false}]},
{"problem_data":{"problem_type":0,"testname":"notContainsA","brief_description":"Check if a String does not contain 'a'","description":"Write a static method called notContainsA that takes a String as a parameter and returns true\nif the String does <b>not<\/b> contain the character 'a'.\n<p>\nnotContainsA(\"abc\") -> false<br>\nnotContainsA(\"xyz\") -> true<br>\nnotContainsA(\"xyza\") -> false<br>\n<\/p>","skeleton":"public boolean notContainsA(String s) {\n    \n}","schema_version":4,"author_name":"jaime spacco","author_email":"jspacco@knox.edu","author_website":"cs.knox.edu","timestamp_utc":1391623200000,"license":1,"parent_hash":"","external_library_url":"","external_library_md5":""},"test_case_data_list":[{"test_case_name":"t0","input":"\"abc\"","output":"false","secret":false},{"test_case_name":"t1","input":"\"xyz\"","output":"true","secret":false},{"test_case_name":"t2","input":"\"xyza\"","output":"false","secret":false},{"test_case_name":"t3","input":"\"\"","output":"true","secret":false},{"test_case_name":"t4","input":"\"a\"","output":"false","secret":false},{"test_case_name":"t5","input":"\"z\"","output":"true","secret":false},{"test_case_name":"t6","input":"\"xyzzaydyfysyd\"","output":"false","secret":true}]},
{"problem_data":{"problem_type":0,"testname":"isAlpha","brief_description":"Check if a String's characters are in alphabetical order","description":"Given a String as a parameter, return true only when\nthe letters of the String are in alphabetical order. Assume\nthat the empty String is in alphabetical order.\nFor example:\n<p>\nisAlpha(\"abc\") => true\nisAlpha(\"xya\") => false\nisAlpha(\"w\") => true\n<\/p>","skeleton":"public static boolean isAlpha(String s)\n{\n    \n}","schema_version":4,"author_name":"jaime spacco","author_email":"jspacco@knox.edu","author_website":"cs.knox.edu","timestamp_utc":1391661063228,"license":1,"parent_hash":"","external_library_url":"","external_library_md5":""},"test_case_data_list":[{"test_case_name":"t0","input":"\"abc\"","output":"true","secret":false},{"test_case_name":"t1","input":"\"xya\"","output":"false","secret":false},{"test_case_name":"t2","input":"\"w\"","output":"true","secret":false},{"test_case_name":"t3","input":"\"\"","output":"true","secret":false},{"test_case_name":"t4","input":"\"abcdefhgjkl\"","output":"false","secret":false},{"test_case_name":"t5","input":"\"vwxyz\"","output":"true","secret":false}]},
{"problem_data":{"problem_type":0,"testname":"notContainsXY","brief_description":"Check that a String does not contain two given chars","description":"Write a static method called notContainsA that takes a String\nand two chars as parameters, and return true if the String\ndoes <b>not<\/b> contain the two chars next to each other, <i>in the\norder they are given.<\/i> For example:\n<p>\nnotContainsXY(\"abc\", 'b', 'a') -> true<br>\nnotContainsXY(\"xyz\", 'x', 'y') -> false<br>\nnotContainsXY(\"xyza\", 'x', 'z') -> true<br>\n<\/p>","skeleton":"public static boolean notContainsXY(String s, char c1, char c2)\n{\n    \n}","schema_version":4,"author_name":"jaime spacco","author_email":"jspacco@knox.edu","author_website":"cs.knox.edu","timestamp_utc":1391660731817,"license":1,"parent_hash":"","external_library_url":"","external_library_md5":""},"test_case_data_list":[{"test_case_name":"t0","input":"\"abc\", 'b', 'a'","output":"true","secret":false},{"test_case_name":"t1","input":"\"xyz\", 'x', 'y'","output":"false","secret":false},{"test_case_name":"t2","input":"\"xyza\", 'x', 'z'","output":"true","secret":false},{"test_case_name":"t3","input":"\"\", 'a', 'b'","output":"true","secret":false},{"test_case_name":"t4","input":"\"abc\", 'a', 'a'","output":"true","secret":false},{"test_case_name":"t5","input":"\"xyzaazyx\", 'a', 'a'","output":"false","secret":false}]},
{"problem_data":{"problem_type":0,"testname":"notContainsX","brief_description":"Check if a String does not contain a given char","description":"Write a static method called notContainsX that takes a String \nand a char as parameters, and returns true\nif the String does <b>not<\/b> contain the given char. \nFor example:\n<p>\nnotContainsX(\"abc\", 'z') -> true<br>\nnotContainsX(\"xyz\", 'z') -> false<br>\nnotContainsX(\"xyza\", 'y') -> false<br>\n<\/p>","skeleton":"public static boolean notContainsX(String s, char ch)\n{\n    \n}","schema_version":4,"author_name":"jaime spacco","author_email":"jspacco@knox.edu","author_website":"cs.knox.edu","timestamp_utc":1391659334637,"license":1,"parent_hash":"","external_library_url":"","external_library_md5":""},"test_case_data_list":[{"test_case_name":"t0","input":"\"abc\", 'z'","output":"true","secret":false},{"test_case_name":"t1","input":"\"xyz\", 'z'","output":"false","secret":false},{"test_case_name":"t2","input":"\"xyza\", 'y'","output":"false","secret":false},{"test_case_name":"t3","input":"\"\", 'a'","output":"true","secret":false},{"test_case_name":"t4","input":"\"w\", 'w'","output":"false","secret":true},{"test_case_name":"t5","input":"\"xyzabc\", 'v'","output":"true","secret":true}]},
{"problem_data":{"problem_type":0,"testname":"notContainsAB","brief_description":"Check that a String does not contain ab","description":"Write a static method called notContainsA that takes a String as a parameter and returns true\nif the String does <b>not<\/b> contain the sequence \"ab\".\n<p>\nnotContainsA(\"abc\") -> false<br>\nnotContainsA(\"xyz\") -> true<br>\nnotContainsA(\"xyza\") -> true<br>\n<\/p>","skeleton":"public boolean notContainsAB(String s) {\n    \n}","schema_version":4,"author_name":"jaime spacco","author_email":"jspacco@knox.edu","author_website":"cs.knox.edu","timestamp_utc":1391659114627,"license":1,"parent_hash":"","external_library_url":"","external_library_md5":""},"test_case_data_list":[{"test_case_name":"t0","input":"\"abc\"","output":"false","secret":false},{"test_case_name":"t1","input":"\"xyz\"","output":"true","secret":false},{"test_case_name":"t2","input":"\"xyza\"","output":"true","secret":false},{"test_case_name":"t3","input":"\"\"","output":"true","secret":false},{"test_case_name":"t4","input":"\"xyzab\"","output":"false","secret":false},{"test_case_name":"t5","input":"\"ab\"","output":"false","secret":true}]},
{"problem_data":{"problem_type":0,"testname":"noCommonLetters","brief_description":"Check that two Strings contain none of the same letters.","description":"Write a function (static method) that takes two Strings as\nparameters, and returns true if they have no letters in\ncommon, and false otherwise. For example:\n<p>\n<pre>\nnoCommonLetters(\"abcd\", \"wxyz\") -> true\nnoCommonLetters(\"abcd\", \"wxyza\") -> false\nnoCommonLetters(\"abcd\", \"\") -> true\n<\/pre>\n<\/p>","skeleton":"public boolean noCommonLetters(String s1, String s2)\n{\n    \n}","schema_version":4,"author_name":"jaime spacco","author_email":"jspacco@knox.edu","author_website":"cs.knox.edu","timestamp_utc":1391698062781,"license":1,"parent_hash":"","external_library_url":"","external_library_md5":""},"test_case_data_list":[{"test_case_name":"t0","input":"\"abcd\", \"wxyz\"","output":"true","secret":false},{"test_case_name":"t1","input":"\"abcd\", \"xyza\"","output":"false","secret":false},{"test_case_name":"t2","input":"\"abcd\", \"\"","output":"true","secret":false},{"test_case_name":"t3","input":"\"a\", \"jkl;a\"","output":"false","secret":false},{"test_case_name":"t4","input":"\"the dog is great\", \"cat\"","output":"false","secret":false},{"test_case_name":"t5","input":"\"the dog is great\", \"vwxyz\"","output":"true","secret":true}]},
{"problem_data":{"problem_type":0,"testname":"numTimes0","brief_description":"Count the number of times that 0 occurs in an array of ints.","description":"Given an int array, return the number of times the number\n0 occurs in the array. For example:\n<p>\nnumTimes0( {1,2,3,4} ) => 0<br>\nnumTimes0( {1,2,0,4} ) => 1<br>\nnumTimes0( {1,2,3,0,0,7,0} ) => 3<br>\n<\/p>","skeleton":"public int numTimes0(int[] arr)\n{\n    \n}","schema_version":4,"author_name":"jaime spacco","author_email":"jspacco@knox.edu","author_website":"cs.knox.edu","timestamp_utc":1392265001649,"license":1,"parent_hash":"","external_library_url":"","external_library_md5":""},"test_case_data_list":[{"test_case_name":"t0","input":"new int[] {1,2,3,4}","output":"0","secret":false},{"test_case_name":"t1","input":"new int[] {1,2,3,0}","output":"1","secret":false},{"test_case_name":"t2","input":"new int[] {1,2,3,0,0,7,0}","output":"3","secret":false},{"test_case_name":"t3","input":"new int[] {}","output":"0","secret":false},{"test_case_name":"t4","input":"new int[] {0}","output":"1","secret":false},{"test_case_name":"t5","input":"new int[] {0,2,3,0,0,7,0,5,0}","output":"5","secret":true}]},
{"problem_data":{"problem_type":0,"testname":"numTimes2","brief_description":"Count total # of times two vals occur in an int array","description":"Given an array of ints and two ints, count the total number of times\neach int occurs in the array. If the two int parameters are the same,\nyou should only count them once.\nFor example:\n<pre>\nnumTimes2({1,2,3,4,2,1}, 1, 2) => 4\nnumTimes2({1,2,3,4,5,4,3,2,1}, 7, 4) => 2\nnumTimes2({5,6,7,4,2,4,5,2,6,7,3,4,2}, 2, 2) => 3\n<\/pre>","skeleton":"public int numTimes2(int[] arr, int val1, int val2)\n{\n    \n}","schema_version":4,"author_name":"jaime spacco","author_email":"jspacco@knox.edu","author_website":"cs.knox.edu","timestamp_utc":1392265442211,"license":1,"parent_hash":"","external_library_url":"","external_library_md5":""},"test_case_data_list":[{"test_case_name":"t0","input":"new int[] {1,2,3,4,2,1}, 1, 2","output":"4","secret":false},{"test_case_name":"t1","input":"{1,2,3,4,5,4,3,2,1}, 7, 4","output":"2","secret":false},{"test_case_name":"t2","input":"{5,6,7,4,2,4,5,2,6,7,3,4,2}, 2, 2","output":"3","secret":false},{"test_case_name":"t3","input":"new int[] {}, 2, 3","output":"0","secret":false},{"test_case_name":"t4","input":"new int[] {3}, 3, 3","output":"1","secret":false},{"test_case_name":"t5","input":"{5,6,7,4,2,4,5,2,6,7,3,4,2}, 2, 7)","output":"5","secret":true}]},
{"problem_data":{"problem_type":0,"testname":"isSorted","brief_description":"Check if an array is sorted from smallest to largest.","description":"Given an array of ints, return true if the array is in sorted\nascending order, and false otherwise. For example:\n<pre>\nisSorted({1,2,3,100}) => true\nisSorted({1,2,3,0}) => false\nisSorted({4,5,2,7}) => false\nisSorted({}) => true\n<\/pre>","skeleton":"public boolean isSorted(int[] arr)\n{\n    \n}","schema_version":4,"author_name":"jaime spacco","author_email":"jspacco@knox.edu","author_website":"cs.knox.edu","timestamp_utc":1392265970902,"license":1,"parent_hash":"","external_library_url":"","external_library_md5":""},"test_case_data_list":[{"test_case_name":"t0","input":"new int[] {1,2,3,4}","output":"true","secret":false},{"test_case_name":"t1","input":"new int[] {1,2,3,0}","output":"false","secret":false},{"test_case_name":"t2","input":"new int[] {4,5,2,7}","output":"false","secret":false},{"test_case_name":"t3","input":"new int[] {}","output":"true","secret":false},{"test_case_name":"t4","input":"new int[] {3, 9, 100, 100000}","output":"true","secret":false},{"test_case_name":"t5","input":"new int[] {3, 9, 100, 3, 100000}","output":"false","secret":false},{"test_case_name":"t6","input":"new int[] {4}","output":"true","secret":false}]},
{"problem_data":{"problem_type":0,"testname":"numTriples","brief_description":"Count the number of \"triples\" in an array of ints","description":"Given an array of ints, return the number of \"triples\" in\nthe array. A \"triple\" is three consecutive ints in increasing\norder differing by 1 (i.e. 3,4,5 is a triple, but 5,4,3 and 2,4,6 are not).\nFor example:\n<pre>\nnumTriples({1,2,4,5,6,7}) => 2\nnumTriples({1,4,7,5,4,3}) => 0\nnumTriples({}) => 0\n<\/pre>","skeleton":"public int numTriples(int[] arr)\n{\n    \n}","schema_version":4,"author_name":"jaime spacco","author_email":"jspacco@knox.edu","author_website":"cs.knox.edu","timestamp_utc":1392266898437,"license":1,"parent_hash":"","external_library_url":"","external_library_md5":""},"test_case_data_list":[{"test_case_name":"t0","input":"new int[] {1,2,4,5,6,7}","output":"2","secret":false},{"test_case_name":"t1","input":"new int[] {1,4,7,5,4,3}","output":"0","secret":false},{"test_case_name":"t2","input":"new int[] {}","output":"0","secret":false},{"test_case_name":"t3","input":"new int[] {1,2,3,4,5,6}","output":"4","secret":false},{"test_case_name":"t4","input":"new int[] {9,8,7,6,5,4,3}","output":"0","secret":false},{"test_case_name":"t5","input":"new int[] {1,2}","output":"0","secret":false},{"test_case_name":"t6","input":"new int[] {1}","output":"0","secret":false}]},
{"problem_data":{"problem_type":0,"testname":"notContainsNM","brief_description":"Check if n and m never occur next to each other","description":"Given an array of ints and two ints n and m, return true if n\nand m <i>never<\/i>occur next to each other (in any order) in the array.\nFor example:\n<pre>\ncontainsNM({1,2,3}, 2, 3) => false\ncontainsNM({1,2,3}, 3, 4) => true\ncontainsNM({7, 8, 3}, 3, 8) => false\ncontainsNM({}, 7, 3) => true\n<\/pre>","skeleton":"public static boolean notContainsNM(int[] arr, int n, int m)\n{\n    \n}","schema_version":1,"author_name":"Jaime Spacco","author_email":"jspacco@knox.edu","author_website":"","timestamp_utc":1360865341538,"license":1,"parent_hash":"321e62eb7eb626efce1eb1479916761e168b3c25","external_library_url":"","external_library_md5":""},"test_case_data_list":[{"test_case_name":"t0","input":"new int[] {1,2,3}, 2, 3","output":"false","secret":false},{"test_case_name":"t1","input":"new int[] {1,2,3}, 3, 4","output":"true","secret":false},{"test_case_name":"t2","input":"new int[] {}, 7, 8","output":"true","secret":false},{"test_case_name":"t3","input":"new int[] {3,4,5,6,3,4,6,4,4}, 4, 4","output":"false","secret":false},{"test_case_name":"t4","input":"new int[] {3,4,5,6,3,8,6,4,4}, 4, 6","output":"false","secret":false},{"test_case_name":"t5","input":"new int[] {3,4,5,6,3,8,6,4,4}, 6, 4","output":"false","secret":false},{"test_case_name":"t6","input":"new int[] {3,4,5,6,3,4,6,4,4, 8}, 5, 8","output":"true","secret":false}]},
{"problem_data":{"problem_type":0,"testname":"longestInOrderSequence","brief_description":"Return the length of the longest in-order subsequence","description":"Given an array of ints, return the length of the longest\nsequence in the array of ints that are in ascending order.\nFor example:\n<pre>\nlongestInOrderSequence( {1,2,4,1,2,3,5,7,4,3} ) => 3\nlongestInOrderSequence( {1,2,4,1,2,3,5,7,8,9,10,11} ) => 5\nlongestInOrderSequence( {1,4,6,99,34,23,0,-1} ) => 1\n<\/pre>","skeleton":"public int longestInOrderSequence(int[] nums) {\n  \n}","schema_version":4,"author_name":"jaime spacco","author_email":"jspacco@knox.edu","author_website":"cs.knox.edu","timestamp_utc":1392872451393,"license":1,"parent_hash":"","external_library_url":"","external_library_md5":""},"test_case_data_list":[{"test_case_name":"t0","input":"new int[] {1,2,4,1,2,3,5,7,4,3}","output":"3","secret":false},{"test_case_name":"t1","input":"new int[] {1,2,4,1,2,3,5,7,8,9,10,11}","output":"5","secret":false},{"test_case_name":"t2","input":"new int[]  {1,4,6,99,34,23,0,-1}","output":"1","secret":false},{"test_case_name":"t3","input":"new int[] {}","output":"0","secret":false},{"test_case_name":"t4","input":"new int[] {99}","output":"1","secret":false},{"test_case_name":"t5","input":"new int[] {1,2,3,4,5,6,7,8,9,10}","output":"10","secret":true},{"test_case_name":"t6","input":"new int[] {6,5,2,6,2,9,7}","output":"1","secret":false}]},
{"problem_data":{"problem_type":0,"testname":"isAlphabetical","brief_description":"Is an array of Strings in alphabetical order?","description":"Given an array of Strings, return true if the array of Strings\nis in alphabetical order. For example:\n<pre>\nisAlphabetical( {\"a\", \"b\", \"c\"} ) => true\nisAlphabetical( {\"a\", \"b\", \"c\", \"z\", \"a\"} ) => false\nisAlphabetical( {\"a\", \"aa\", \"az\", \"aza\"} ) => true\nisAlphabetical( {\"abc\", \"abd\", \"abz\"} ) => true\nisAlphabetical( {\"abc\", \"abd\", \"aba\"} ) => false\n<\/pre>\nNote that you can compare chars with &lt; to see if one comes\nbefore the other one (i.e. by comparing ASCII values).\n<p>\nAlso, shorter strings come before longer strings whenever the shorter\nstring is a subset of the longer one. So, \"a\" comes before \"abc\".\n<\/p>\n<p>\nFinally, Strings which are identical are in alphabetical order.\n<\/p>","skeleton":"public boolean isAlphabetical(String[] sarr)\n{\n    \n}","schema_version":4,"author_name":"jaime spacco","author_email":"jspacco@knox.edu","author_website":"cs.knox.edu","timestamp_utc":1392876910068,"license":1,"parent_hash":"","external_library_url":"","external_library_md5":""},"test_case_data_list":[{"test_case_name":"t0","input":"new String[] {\"a\", \"b\", \"c\"}","output":"true","secret":false},{"test_case_name":"t1","input":"new String[] {\"a\", \"b\", \"c\", \"z\", \"a\"}","output":"false","secret":false},{"test_case_name":"t2","input":"new String[] {\"a\", \"aa\", \"az\", \"aza\"}","output":"true","secret":false},{"test_case_name":"t3","input":"new String[] {\"abc\", \"abd\", \"abz\"}","output":"true","secret":false},{"test_case_name":"t4","input":"new String[] {\"abc\", \"abd\", \"aba\"}","output":"false","secret":false},{"test_case_name":"t5","input":"new String[] {\"aa\", \"a\"}","output":"false","secret":false},{"test_case_name":"t6","input":"new String[] {\"abc\", \"abc\"}","output":"true","secret":false},{"test_case_name":"t7","input":"new String[] {\"abcdefg\", \"abcdefgh\"}","output":"true","secret":false},{"test_case_name":"t8","input":"new String[] {\"abcdefghz\", \"abcdefghv\"}","output":"false","secret":false}]},
{"problem_data":{"problem_type":0,"testname":"averageStringLength","brief_description":"Compute the average String length in an array of Strings","description":"Write a function (static method) that takes an array of\nStrings as a parameter and returns the average length\nof the Strings (as a double).\nIf a String is null, assume its length is 0.\nFor example:\n<pre>\naverageStringLength({\"hello\", \"world\"}) => 5.0\naverageStringLength({\"hello\", null}) => 2.5\naverageStringLength({\"hello\", \"there\", \"ab\"}) => 4.0\n<\/pre>","skeleton":"public double averageStringLength(String[] sarr) {\n    return 0.0;\n}","schema_version":7,"author_name":"Jaime Spacco","author_email":"jspacco@knox.edu","author_website":"cs.knox.edu","timestamp_utc":1424785174846,"license":1,"parent_hash":"","external_library_url":"","external_library_md5":""},"test_case_data_list":[{"test_case_name":"t0","input":"new String[] {\"hello\", \"world\"}","output":"5.0","secret":false},{"test_case_name":"t1","input":"new String[] {\"hello\", null}","output":"2.5","secret":false},{"test_case_name":"t2","input":"new String[] {\"hello\", \"world\", \"ab\"}","output":"4.0","secret":false},{"test_case_name":"t3","input":"new String[] {\"hello\", \"world\", \"ab\", null, null, \"\"}","output":"2.0","secret":false},{"test_case_name":"t4","input":"new String[] {\"a\", \"\"}","output":"0.5","secret":false},{"test_case_name":"t5","input":"new String[] {null, null}","output":"0.0","secret":false},{"test_case_name":"t6","input":"new String[] {\"\"}","output":"0.0","secret":false}]},
{"problem_data":{"problem_type":0,"testname":"middleChar","brief_description":"Find the middle character of a String","description":"Find the middle character of a String. The middle character\nof an empty String is also the empty String. Otherwise,\nthe middle char of Strings of an odd length is the middle char,\nwhile the middle char of Strings of an even length is actually\nthe middle two chars. For example:\n<pre>\nmiddleChar(\"asdf\") => \"sd\"\nmiddleChar(\"abc\") => \"b\"\nmiddleChar(\"\") => \"\"\nmiddleChar(\"dog cat dog\") => \"a\"\n<\/pre>","skeleton":"public static String middleChar(String s) {\n    return null;\n}","schema_version":7,"author_name":"Jaime Spacco","author_email":"jspacco@knox.edu","author_website":"cs.knox.edu","timestamp_utc":1424766071861,"license":1,"parent_hash":"","external_library_url":"","external_library_md5":""},"test_case_data_list":[{"test_case_name":"t0","input":"\"\"","output":"\"\"","secret":false},{"test_case_name":"t1","input":"\"a\"","output":"\"a\"","secret":false},{"test_case_name":"t2","input":"\"dog\"","output":"\"o\"","secret":false},{"test_case_name":"t3","input":"\"asdf\"","output":"\"sd\"","secret":false},{"test_case_name":"t4","input":"\"12345678\"","output":"\"45\"","secret":false},{"test_case_name":"t5","input":"\"abccba\"","output":"\"cc\"","secret":false},{"test_case_name":"t6","input":"\"123456789\"","output":"\"5\"","secret":false}]},
{"problem_data":{"problem_type":0,"testname":"countDivisibleBy3","brief_description":"Count the values in an array that are divisble by 2","description":"Write a function (static method) that takes an array of\nints as a parameter and returns the number of values\nin the array that are divisible by 3. For example:\n<pre>\ncountDivisibleBy3({1,2,3,4,5,6}) => 2\ncountDivisibleBy3({1,2,4,4,5,7}) => 0\ncountDivisibleBy3({3,4,5}) => 1\n<\/pre>","skeleton":"public int countDivisibleBy3(int[] arr) {\n    return -1;\n}","schema_version":7,"author_name":"Jaime Spacco","author_email":"jspacco@knox.edu","author_website":"cs.knox.edu","timestamp_utc":1424787743233,"license":1,"parent_hash":"","external_library_url":"","external_library_md5":""},"test_case_data_list":[{"test_case_name":"t0","input":"new int[] {1,2,3,4,5,6}","output":"2","secret":false},{"test_case_name":"t1","input":"new int[] {}","output":"0","secret":false},{"test_case_name":"t2","input":"new int[] {3}","output":"1","secret":false},{"test_case_name":"t3","input":"new int[] {3,3,9,12,18}","output":"5","secret":false},{"test_case_name":"t4","input":"new int[] {4}","output":"0","secret":false}]},
{"problem_data":{"problem_type":0,"testname":"countDivisibleByX","brief_description":"Count number of values divisible by X","description":"Write a function (static method) that takes an array of ints\nand an int named <tt>x<\/tt> as parameters, and returns\nthe number of values in the array that are divisible by x.\nFor example:\n<pre>\ncountDivisibleByX( {1,2,3,4,5,6}, 2) => 3\ncountDivisibleByX( {1,2,3,4,5,6}, 1) => 6\ncountDivisibleByX( {1,2,3,4,5,6}, 7) => 0\n<\/pre>","skeleton":"public int countDivisibleByX(int[] arr, int x) {\n    return -1;\n}","schema_version":7,"author_name":"Jaime Spacco","author_email":"jspacco@knox.edu","author_website":"cs.knox.edu","timestamp_utc":1424789094804,"license":1,"parent_hash":"","external_library_url":"","external_library_md5":""},"test_case_data_list":[{"test_case_name":"t0","input":"new int[] {1,2,3,4,5,6}, 2","output":"3","secret":false},{"test_case_name":"t1","input":"new int[] {1,2,3,4,5,6}, 6","output":"1","secret":false},{"test_case_name":"t2","input":"new int[] {1,2,3,4,5,6}, 7","output":"0","secret":false},{"test_case_name":"t3","input":"new int[] {}, 5","output":"0","secret":false},{"test_case_name":"t4","input":"new int[] {8}, 4","output":"1","secret":false},{"test_case_name":"t5","input":"new int[] {9}, 4","output":"0","secret":false},{"test_case_name":"t6","input":"new int[] {1,2,3,4}, 4","output":"1","secret":false}]},
{"problem_data":{"problem_type":0,"testname":"countNumBetween","brief_description":"Count the number of ints between two values","description":"Write a function (static method) that takes an array of ints\nand two ints <tt>a<\/tt> and <tt>b<\/tt> as parameters,\nand returns the number of values that are greater than or \nequal to <tt>a<\/tt>, and less than or equal to <tt>b<\/tt>.\nIf <tt>a<\/tt> is greater than <tt>b<\/tt>, return 0.\nFor example:\n<pre>\ncountNumBetween( {1,2,3,4,50,100}, 25, 75) => 1 (since 50 is the only number between 25 and 75)\ncountNumBetween( {1,2,3,4,50,100}, 50, 100) => 2\ncountNumBetween( {5,10,20,4,100,99,8}, 6, 50) => 3\n<\/pre>","skeleton":"public int countNumBetween(int[] arr, int a, int b) {\n    \n}","schema_version":7,"author_name":"Jaime Spacco","author_email":"jspacco@knox.edu","author_website":"cs.knox.edu","timestamp_utc":1425488341694,"license":1,"parent_hash":"","external_library_url":"","external_library_md5":""},"test_case_data_list":[{"test_case_name":"t0","input":"new int[] {1,2,3,4,50,100}, 25, 75","output":"1","secret":false},{"test_case_name":"t1","input":"new int[]  {1,2,3,4,50,100}, 50, 100","output":"2","secret":false},{"test_case_name":"t2","input":"new int[] {5,10,20,4,100,99,8}, 6, 50","output":"3","secret":false},{"test_case_name":"t3","input":"new int[] {1,2,3,4,5}, 10, 5","output":"0","secret":false},{"test_case_name":"t4","input":"new int[] {}, 5, 10","output":"0","secret":false},{"test_case_name":"t5","input":"new int[] {10, 10, 10, 10} , 10, 10","output":"4","secret":false},{"test_case_name":"t6","input":"new int[] {10}, 10, 11","output":"1","secret":false},{"test_case_name":"t7","input":"new int[] {10, 5, 2, 5, 10}, 2, 9","output":"3","secret":false},{"test_case_name":"t8","input":"new int[] {-5, -4, -3, -2, -1}, -4, -1","output":"4","secret":false},{"test_case_name":"t9","input":"new int[] {100}, 5, 10","output":"0","secret":false}]},
{"problem_data":{"problem_type":0,"testname":"sameNumEvens","brief_description":"Check that two arrays have the same number of even values","description":"Write a function (static method) that takes two int arrays\nas parameters, and returns true if they both have the same\nnumber of even values, and false otherwise. For example:\n<pre>\nsameNumEvens( {1,2,3}, {4,5,6} ) => false\nsameNumEvens( {1,2,3}, {5,6,7} ) => true\nsameNumEvens( {-2,2,18,36}, {1,2,3,4,5,6,7,8} ) => true\n<\/pre>","skeleton":"public boolean sameNumEvens(int[] arr1, int[] arr2) {\n    \n}","schema_version":7,"author_name":"Jaime Spacco","author_email":"jspacco@knox.edu","author_website":"cs.knox.edu","timestamp_utc":1425489133127,"license":1,"parent_hash":"","external_library_url":"","external_library_md5":""},"test_case_data_list":[{"test_case_name":"t0","input":"new int[] {1,2,3}, new int[] {4,5,6} ","output":"false","secret":false},{"test_case_name":"t1","input":"new int[] {1,2,3}, new int[] {5,6,7}","output":"true","secret":false},{"test_case_name":"t2","input":"new int[] {-2,2,18,36}, new int[] {1,2,3,4,5,6,7,8}","output":"true","secret":false},{"test_case_name":"t3","input":"new int[] {}, new int[] {2}","output":"false","secret":false},{"test_case_name":"t4","input":"new int[] {1}, new int[] {2}","output":"false","secret":false},{"test_case_name":"t5","input":"new int[] {2}, new int[] {2}","output":"true","secret":false},{"test_case_name":"t6","input":"new int[] {2}, new int[] {2, 99}","output":"true","secret":false},{"test_case_name":"t7","input":"new int[] {2, 99}, new int[] {2, 99}","output":"true","secret":false},{"test_case_name":"t8","input":"new int[] {-2, -1}, new int[] {1, 2}","output":"true","secret":false},{"test_case_name":"t9","input":"new int[] {1,3,4,5}, new int[] {2, 4, 3, 9, 99}","output":"false","secret":false},{"test_case_name":"t10","input":"new int[] {1, 9, 11}, new int[] {3, 9, 99, 11, 1, 1, 1, 1}","output":"true","secret":false},{"test_case_name":"t11","input":"new int[] {}, new int[] {1,2}","output":"false","secret":false}]},
{"problem_data":{"problem_type":0,"testname":"superSumPositives","brief_description":"Count the number of positives in a 2D int array","description":"Write a function (static method) that counts the number of\npositive values in a 2D int array (i.e. int[][]). The 2D int array\nmay not be square or rectangular, but you can assume\nthat none of the rows is null. For exampe:\n<pre>\nsuperSumPositives( new int[][] { {-1,0,1}, {-2,-1}, {0}}) => 1\nsuperSumPositives( new int[][] { {-1,0,1}, {1,2,3}, {0,0,0}}) => 4\nsuperSumPositives( new int[][] { {-1,0,-1}, {-2,-1}, {-1,-2,-3}}) => 0\n<\/pre>","skeleton":"public static int superSumPositives(int[][] arr) {\n    \n}","schema_version":7,"author_name":"Jaime Spacco","author_email":"jspacco@knox.edu","author_website":"cs.knox.edu","timestamp_utc":1425490797435,"license":1,"parent_hash":"","external_library_url":"","external_library_md5":""},"test_case_data_list":[{"test_case_name":"t0","input":"new int[][] { {-1,0,1}, {-2,-1}, {0}}","output":"1","secret":false},{"test_case_name":"t1","input":"new int[][] { {-1,0,1}, {1,2,3}, {0,0,0}}","output":"4","secret":false},{"test_case_name":"t2","input":"new int[][] { {-1,0,-1}, {-2,-1}, {-1,-2,-3}}","output":"0","secret":false},{"test_case_name":"t3","input":"new int[][] { {-1,0,-1}, {-2,-1}, {-1,-2,-3}, {4}, {5}, {17, 2}, {-8}}","output":"4","secret":false},{"test_case_name":"t4","input":"new int[][] { {0} }","output":"0","secret":false},{"test_case_name":"t5","input":"new int[][] { {1} }","output":"1","secret":false},{"test_case_name":"t6","input":"new int[][] { {1}, {0} }","output":"1","secret":false},{"test_case_name":"t7","input":"new int[][] { {0}, {0} }","output":"0","secret":false},{"test_case_name":"t8","input":"new int[][] { {1}, {0}, {1}, {1}, {1,2} }","output":"5","secret":false},{"test_case_name":"t9","input":"new int[][] { {1}, {1}, {1,2,3,4,5,6,7} }","output":"9","secret":false}]},
{"problem_data":{"problem_type":0,"testname":"noDuplicates","brief_description":"Check that an int array contains no duplicates","description":"Write a function (statis method) that takes an array of ints\nas a parameter, and returns true if there are no duplicate\nints in the array (i.e. no int value appears twice), and\nfalse otherwise. For example:\n<pre>\nnoDuplicates(new int[] {1,2,3} ) => true\nnoDuplicates(new int[] {1,2,3,1} ) => false\nnoDuplicates(new int[] {1} ) => true\n<\/pre>","skeleton":"public static boolean noDuplicates(int[] arr) {\n    \n}","schema_version":7,"author_name":"Jaime Spacco","author_email":"jspacco@knox.edu","author_website":"cs.knox.edu","timestamp_utc":1425491698878,"license":1,"parent_hash":"","external_library_url":"","external_library_md5":""},"test_case_data_list":[{"test_case_name":"t0","input":"new int[] {1,2,3}","output":"true","secret":false},{"test_case_name":"t1","input":"new int[] {1,2,3,1}","output":"false","secret":false},{"test_case_name":"t2","input":"new int[] {1}","output":"true","secret":false},{"test_case_name":"t3","input":"new int[] {}","output":"true","secret":false},{"test_case_name":"t4","input":"new int[] {-100, 1,2,3,4,-100,5,6,7,8}","output":"false","secret":false},{"test_case_name":"t5","input":"new int[] {100, 100}","output":"false","secret":false},{"test_case_name":"t6","input":"new int[] {9,8,7,6,5,4,3,2,1}","output":"true","secret":false},{"test_case_name":"t7","input":"new int[] {1,2,3,4,5,4,3,2,1}","output":"false","secret":false},{"test_case_name":"t8","input":"new int[] {2,4,6,8,12,19,22,33,5313,16,6,88,99}","output":"false","secret":false}]},
{"problem_data":{"problem_type":0,"testname":"sameNumPosNeg","brief_description":"Check if an array of ints has same # positives and negatives","description":"Write a function (static method) that takes an array of ints\nas a parameter, and returns true if the array contains the\nsame number of positive and negative values. Remember that\nzero is neither positive nor negative. For example:\n<pre>\nsameNumPosNeg(new int[] {1,0,-1}) => true\nsameNumPosNeg(new int[] {1,0,-1,-1}) => false\nsameNumPosNeg(new int[] {1,0,0}) => false\nsameNumPosNeg(new int[] {1,0,0,1,-2,-99}) => true\n<\/pre>","skeleton":"public static boolean sameNumPosNeg(int[] arr) {\n    \n}","schema_version":7,"author_name":"Jaime Spacco","author_email":"jspacco@knox.edu","author_website":"cs.knox.edu","timestamp_utc":1425492544819,"license":1,"parent_hash":"","external_library_url":"","external_library_md5":""},"test_case_data_list":[{"test_case_name":"t0","input":"new int[] {1,0,-1}","output":"true","secret":false},{"test_case_name":"t1","input":"new int[] {1,0,-1,-1}","output":"false","secret":false},{"test_case_name":"t2","input":"new int[] {1,0,0}","output":"false","secret":false},{"test_case_name":"t3","input":"new int[] {1,0,0,1,-2,-99}","output":"true","secret":false},{"test_case_name":"t4","input":"new int[] {}","output":"true","secret":false},{"test_case_name":"t5","input":"new int[] {21}","output":"false","secret":false},{"test_case_name":"t6","input":"new int[] {-19}","output":"false","secret":false},{"test_case_name":"t7","input":"new int[] {0}","output":"true","secret":false},{"test_case_name":"t8","input":"new int[] {17,0}","output":"false","secret":false},{"test_case_name":"t9","input":"new int[] {-9,0}","output":"false","secret":false},{"test_case_name":"t10","input":"new int[] {-5, 6}","output":"true","secret":false}]}
]
