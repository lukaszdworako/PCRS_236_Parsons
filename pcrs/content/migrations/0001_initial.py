# -*- coding: utf-8 -*-
# Generated by Django 1.11 on 2017-05-17 14:34
from __future__ import unicode_literals

import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('users', '__first__'),
    ]

    operations = [
        migrations.CreateModel(
            name='Challenge',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('visibility', models.CharField(choices=[('closed', 'closed'), ('open', 'open')], default='open', max_length=10)),
                ('order', models.SmallIntegerField(blank=True, default=0)),
                ('is_graded', models.BooleanField(default=False)),
                ('enforce_prerequisites', models.BooleanField(default=False)),
                ('prerequisites', models.ManyToManyField(blank=True, null=True, to='content.Challenge')),
            ],
            options={
                'ordering': ['quest', 'order'],
            },
        ),
        migrations.CreateModel(
            name='ContentPage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.SmallIntegerField()),
                ('challenge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='content.Challenge')),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='ContentSequenceItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField()),
                ('order', models.SmallIntegerField(blank=True, default=0)),
                ('content_page', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='content.ContentPage')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='Quest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('order', models.SmallIntegerField(default=0)),
                ('mode', models.CharField(choices=[('maintenance', 'maintenance'), ('live', 'live')], default='maintenance', max_length=16)),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='SectionQuest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('visibility', models.CharField(choices=[('closed', 'closed'), ('open', 'open')], default='open', max_length=10)),
                ('open_on', models.DateTimeField(blank=True, default=datetime.datetime.now)),
                ('due_on', models.DateTimeField(blank=True, null=True)),
                ('quest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='content.Quest')),
                ('section', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.Section')),
            ],
            options={
                'ordering': ['quest__order'],
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.SlugField(max_length=100, unique=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='TextBlock',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Video',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('link', models.TextField()),
                ('thumbnail', models.URLField(blank=True)),
                ('download', models.URLField(blank=True)),
                ('resources', models.TextField(blank=True)),
                ('tags', models.ManyToManyField(blank=True, null=True, related_name='content_video_related', to='content.Tag')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='WatchedVideo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, to_field='username')),
                ('video', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='content.Video')),
            ],
        ),
        migrations.AddField(
            model_name='challenge',
            name='quest',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='content.Quest'),
        ),
        migrations.AlterUniqueTogether(
            name='watchedvideo',
            unique_together=set([('video', 'user')]),
        ),
        migrations.AlterUniqueTogether(
            name='sectionquest',
            unique_together=set([('section', 'quest')]),
        ),
        migrations.AlterUniqueTogether(
            name='contentsequenceitem',
            unique_together=set([('content_type', 'object_id', 'content_page')]),
        ),
    ]
